#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_CREATION
#include "../include/constants.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/vertex.glsl"
#include "../include/morton.glsl"
#include "./includes.glsl"

initAtomicIncFunction(aabbcount[0], atomicIncAABB, int)

LOCAL_SIZE_LAYOUT;
//LOCAL_SIZE_LINEAR_LAYOUT;




vec2 intersectCube(in vec3 origin, in vec3 ray, in vec4 cubeMin, in vec4 cubeMax) {
    vec3 dr = 1.0f / ray;
    vec3 tMin = (cubeMin.xyz - origin) * dr;
    vec3 tMax = (cubeMax.xyz - origin) * dr;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
#ifdef ENABLE_AMD_INSTRUCTION_SET
    float tNear = max3(t1.x, t1.y, t1.z);
    float tFar  = min3(t2.x, t2.y, t2.z);
#else
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar  = min(min(t2.x, t2.y), t2.z);
#endif
    BOOL_ isCube = lessEqualF(tNear, tFar);
    return SSC(isCube) ? vec2(min(tNear, tFar), max(tNear, tFar)) : vec2(INFINITY);
}

vec4 points[6];

// check if point is containing
BOOL_ isContain(in vec4 point, in bbox abox){
    return (
        lessEqualF(point.x, abox.mx.x) & greaterEqualF(point.x, abox.mn.x) & 
        lessEqualF(point.y, abox.mx.y) & greaterEqualF(point.y, abox.mn.y) & 
        lessEqualF(point.z, abox.mx.z) & greaterEqualF(point.z, abox.mn.z)
    );
}

// compaction box by triangle
bbox compactBoxByTriangle(in bbox abox, in mat3x4 triverts){
    // triangle vectors
    vec3 e0 = normalize(triverts[1].xyz - triverts[0].xyz);
    vec3 e1 = normalize(triverts[2].xyz - triverts[1].xyz);
    vec3 e2 = normalize(triverts[0].xyz - triverts[2].xyz);

    float l0 = length(triverts[1].xyz - triverts[0].xyz);
    float l1 = length(triverts[2].xyz - triverts[1].xyz);
    float l2 = length(triverts[0].xyz - triverts[2].xyz);

    // box distances
    vec2 d0 = intersectCube(triverts[0].xyz, e0.xyz, abox.mn, abox.mx);
    vec2 d1 = intersectCube(triverts[1].xyz, e1.xyz, abox.mn, abox.mx);
    vec2 d2 = intersectCube(triverts[2].xyz, e2.xyz, abox.mn, abox.mx);

    uint pcount = 0;

    if (d0.x < INFINITY) {
        vec4 p0 = vec4(triverts[0].xyz + e0.xyz * sign(d0.x) * min(abs(d0.x), l0), 1.0f);
        vec4 p1 = vec4(triverts[0].xyz + e0.xyz * sign(d0.y) * min(abs(d0.y), l0), 1.0f);

        IF (isContain(p0, abox) & greaterEqualF(d0.x, 0.f)) points[pcount++] = p0;
        IF (isContain(p1, abox) & greaterEqualF(d0.y, 0.f)) points[pcount++] = p1;
    }

    if (d1.x < INFINITY) {
        vec4 p0 = vec4(triverts[1].xyz + e1.xyz * sign(d1.x) * min(abs(d1.x), l1), 1.0f);
        vec4 p1 = vec4(triverts[1].xyz + e1.xyz * sign(d1.y) * min(abs(d1.y), l1), 1.0f);

        IF (isContain(p0, abox) & greaterEqualF(d1.x, 0.f)) points[pcount++] = p0;
        IF (isContain(p1, abox) & greaterEqualF(d1.y, 0.f)) points[pcount++] = p1;
    }

    if (d2.x < INFINITY) {
        vec4 p0 = vec4(triverts[2].xyz + e2.xyz * sign(d2.x) * min(abs(d2.x), l2), 1.0f);
        vec4 p1 = vec4(triverts[2].xyz + e2.xyz * sign(d2.y) * min(abs(d2.y), l2), 1.0f);

        IF (isContain(p0, abox) & greaterEqualF(d2.x, 0.f)) points[pcount++] = p0;
        IF (isContain(p1, abox) & greaterEqualF(d2.y, 0.f)) points[pcount++] = p1;
    }

    bbox result;
    result.mn =  vec4(100000.f);
    result.mx = -vec4(100000.f);

    for (int i=0;i<pcount;i++) {
        result.mn = min(points[i], result.mn);
        result.mx = max(points[i], result.mx);
    }

    // clip box by original 
    result.mn = max(result.mn, abox.mn);
    result.mx = min(result.mx, abox.mx);
    
    return result;
}




void main() {
    int n = GEOMETRY_BLOCK geometryUniform.triangleCount;
    int wcount = min(tiled(n, int(gl_WorkGroupSize.x)), 50000);
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x); if (globalID >= n) break;
        if (globalID < n && globalID >= 0) {
            vec4 mn = vec4(INFINITY), mx = vec4(-INFINITY);

            const uint tri = clamp(globalID, 0u, uint(GEOMETRY_BLOCK geometryUniform.triangleCount-1));
            
            const uint itri = tri*9;
            mat3x4 triverts = transpose(mat4x3(
                vec3(lvtx[itri+0], lvtx[itri+1], lvtx[itri+2]), 
                vec3(lvtx[itri+3], lvtx[itri+4], lvtx[itri+5]), 
                vec3(lvtx[itri+6], lvtx[itri+7], lvtx[itri+8]),
                1.f.xxx
            ));

            triverts[0] = divW(mult4(bvhBlock.creatorUniform.transform, triverts[0]));
            triverts[1] = divW(mult4(bvhBlock.creatorUniform.transform, triverts[1]));
            triverts[2] = divW(mult4(bvhBlock.creatorUniform.transform, triverts[2]));

            vec4 tcenter = (triverts[0] + triverts[1] + triverts[2]) * 0.33333333333333f;
            if (length(abs(triverts[0] - tcenter).xyz + abs(triverts[1] - tcenter).xyz + abs(triverts[2] - tcenter).xyz) >= 1.e-5) {
                bbox bounding = calcTriBox(triverts);
                vec4 bcenter = tcenter;

                // compaction of box
                bounding = compactBoxByTriangle(bounding, triverts);

                // view based 
                {
                    int to = atomicIncAABB(TRUE_);
                    MortoncodesIndices[to] = int(to);
#ifdef INT64_MORTON
                    Mortoncodes[to] = MORTONTYPE(encodeMorton3_64(clamp(
                        uvec3(floor(clamp(fma(bcenter.xyz, 0.5f.xxx, 0.5f.xxx), vec3(0.0f), vec3(0.99999f)) * 2097152.0f)), 
                        uvec3(0), uvec3(0x1FFFFF))));
#else
                    Mortoncodes[to] = MORTONTYPE(encodeMorton3_64(clamp(
                        uvec3(floor(clamp(fma(bcenter.xyz, 0.5f.xxx, 0.5f.xxx), vec3(0.0f), vec3(0.99999f)) * 1024.0f)), 
                        uvec3(0), uvec3(0x3FF))));
#endif

#ifdef USE_F32_BVH
#define PRECB 0.00005f
#else
#define PRECB 0.0005f
#endif
                    
                    UBLANEF_UNPACKED_ mn = UBLANEF_UNPACKED_(bounding.mn-PRECB), mx = UBLANEF_UNPACKED_(bounding.mx+PRECB);
                    HlbvhNode outLeaf = Leafs[to];
                    outLeaf.lbox = UHBOXF_(PACK_LANE_(mn), PACK_LANE_(mx));
                    outLeaf.pdata.xy = ivec2(to);
                    outLeaf.pdata.zw = ivec2(-1, globalID);
                    Leafs[to] = outLeaf;
                }
            }
        }
    }
}
