#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define FLATTEN_BOX

#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING // store rays in registers if possible
//#define STACKLESS_BVH

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/morton.glsl"
#include "../include/mathlib.glsl"
#include "../include/vertex.glsl"

#ifndef EXTENDED_SHARED_CACHE_SUPPORT
const int STACK_SIZE = 8;
const int EXT_STACK_SIZE = 24;
#else // extended shared cache
const int STACK_SIZE = 16;
const int EXT_STACK_SIZE = 16;
#endif

const int BAKED_STACK_SIZE = 1;
const int ESTIMATE_BATCH = WARP_SIZE;
const int STACK_SIZE_SM = EXT_STACK_SIZE + STACK_SIZE;

struct BlockCacheInfo {
    int indiceCount; // count of indices in traverse
    int triCount; // count of triangle pairs
    ivec2 padding0;
};

// as minimum 16kb + 16 byte per block
struct BlockCache {
    BlockCacheInfo info;
    ivec2 triangles[WARP_SIZE*2]; // ~16kb
};


struct NodeCacheInfo {
    int bakedStackCount;
    int chainID;
    int prevHt;
    int nextHt;
};

// as minimum 384 byte per node
struct NodeCache {
    NodeCacheInfo info;
    int indeferredStackExt[EXT_STACK_SIZE];
    vec4 bakedStack[BAKED_STACK_SIZE];
};



layout ( std430, binding = 16, set = 0 ) restrict buffer TraverseNodes { NodeCache nodeCache[]; };
layout ( std430, binding = 17, set = 0 ) restrict buffer TraverseBlock { BlockCache blockCache[]; };


// pointer in global cache
int rayID = 0;

// merge cached intersections to hit buffer
void includeChain(inout vec4 intersection) {
    // initial hit
    HitRework hitp; 
    hitp.next = -1;

    // reuse old chains (i.e. override)
    int hid = nodeCache[rayID].info.nextHt; if (hid > 0) hitp = hits[hid-1];
    nodeCache[rayID].info.nextHt = hitp.next > 0 ? hitp.next : -1; // next linked ID

    // allocate new hit if chain is none
    if (hid <= 0) hid = atomicIncHT(TRUE_)+1;

    // create new hit element with default properties
    if (hid > 0) {
        hitp = hits[hid-1];
        hitp.uvt = intersection;
        hitp.next = nodeCache[rayID].info.nextHt; // for future overriding
        hitp.ray = int(getGeneralNodeId());
        hits[hid-1] = hitp;

        // link previous element (or header) with current
        int prvh = exchange(nodeCache[rayID].info.prevHt, hid);
        if (prvh == -1) { nodeCache[rayID].info.chainID = hid; } else { exchange(hits[prvh-1].next, hid); }
    }
}

struct GeometrySpace {
    int axis; mat3 iM; //float lastDist; 
    vec4 lastIntersection;
};

struct BVHSpace {
    FMAT3X4_ minusOrig, directInv; BVEC3_ boxSide;
    float cutOut;
};

struct BvhTraverseState {
    uint64_t bitStack;
    int idx, defTriangleID;
    float distMult, diffOffset;
    bool liveState;

    GeometrySpace geometrySpace;
    BVHSpace bvhSpace;
} traverseState;



void doIntersection() {
    BOOL_ near = BOOL_(traverseState.defTriangleID >= 0);
    vec2 uv = vec2(0.f.xx);
    float d = intersectTriangle(currentRay.origin.xyz, traverseState.geometrySpace.iM, traverseState.geometrySpace.axis, traverseState.defTriangleID.x, uv.xy, near.x, traverseState.geometrySpace.lastIntersection.z);

    
    float _nearhit = traverseState.geometrySpace.lastIntersection.z;
    IF (lessF(d, _nearhit)) {
        traverseState.bvhSpace.cutOut = d * traverseState.distMult - traverseState.diffOffset;
    }
    
    // validate hit 
    near &= lessF(d, INFINITY) & lessEqualF(d, _nearhit);
    IF (near.x) traverseState.geometrySpace.lastIntersection = vec4(uv.xy, d.x, intBitsToFloat(traverseState.defTriangleID.x));

    // reset triangle ID 
    traverseState.defTriangleID = -1;
}



void doBvhTraverse(inout vec3 origin, in vec3 direct, in BOOL_ valid) {
    nodeCache[rayID].info.prevHt = -1;
    nodeCache[rayID].info.chainID = -1;

    traverseState.idx = 0;
    traverseState.bitStack = 0ul;
    traverseState.defTriangleID = -1;
    traverseState.distMult = 1.f;
    traverseState.diffOffset = 0.f;
    traverseState.liveState = SSC(valid);
    traverseState.bvhSpace.cutOut = INFINITY;
    
    // test constants
    vec3 
        torig = -divW(mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(origin, 1.0f))).xyz,
        torigTo = divW(mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(origin+direct, 1.0f))).xyz,
        dirproj = torigTo+torig;
    
    float dirlenInv = 1.f / max(length(dirproj), 0.00001f), toffset = 0.f;
    dirproj *= dirlenInv; dirproj = 1.f / (max(abs(dirproj), vec3(0.0001f)) * mix(vec3(-1),vec3(1),greaterThanEqual(dirproj,vec3(0.f))));

    // limitation of distance
    BVEC3_ bsgn = (BVEC3_(sign(dirproj)*FTYPE_(1.0001f))+TRUE_)>>TRUE_;

    // bvh space precalculations 
    traverseState.bvhSpace.directInv = FMAT3X4_(dirproj.xxxx, dirproj.yyyy, dirproj.zzzz); torig *= dirproj;
    traverseState.bvhSpace.minusOrig = FMAT3X4_(torig.xxxx, torig.yyyy, torig.zzzz);
    traverseState.bvhSpace.boxSide = bsgn;
    traverseState.distMult = dirlenInv;
    traverseState.diffOffset = toffset;

    { // calculate longest axis
        vec3 drs = abs(direct); traverseState.geometrySpace.axis = 2;
        if (drs.y >= drs.x && drs.y > drs.z) traverseState.geometrySpace.axis = 1;
        if (drs.x >= drs.z && drs.x > drs.y) traverseState.geometrySpace.axis = 0;
        if (drs.z >= drs.y && drs.z > drs.x) traverseState.geometrySpace.axis = 2;
    }

    // calculate affine matrices
    vec4 vm = vec4(-direct, 1.f) / (traverseState.geometrySpace.axis == 0 ? direct.x : (traverseState.geometrySpace.axis == 1 ? direct.y : direct.z));
    traverseState.geometrySpace.iM = transpose(mat3(
        traverseState.geometrySpace.axis == 0 ? vm.wyz : vec3(1.f,0.f,0.f),
        traverseState.geometrySpace.axis == 1 ? vm.xwz : vec3(0.f,1.f,0.f),
        traverseState.geometrySpace.axis == 2 ? vm.xyw : vec3(0.f,0.f,1.f)
    ));
    traverseState.geometrySpace.lastIntersection = vec4(0.f.xx, INFINITY, FINT_NULL);

    // begin of traverse BVH 
    for (int hi=0;hi<1024;hi++) {
        if (!traverseState.liveState) break; // if traverse can't live

        for (int li=0;li<1024;li++) {
            
            bool _continue = false;
            ivec4 comp4 = texelFetch(bvhStorage, bvhLinear2D(traverseState.idx), 0);
            
            // if not leaf 
            if (comp4.x != comp4.y) {
                vec2 nears = INFINITY.xx, fars = INFINITY.xx; int _cmp = comp4.x >> 1;

                BVEC2_ childIntersect = BVEC2_(traverseState.liveState.xx);
                childIntersect &= BOOL_(comp4.x != comp4.y).xx; // base on fact 
                childIntersect &= intersectCubeDual(traverseState.bvhSpace.minusOrig, traverseState.bvhSpace.directInv, traverseState.bvhSpace.boxSide, FMAT3X4_(
                    UNPACK_LANE_(bvhBoxes[_cmp][0]),
                    UNPACK_LANE_(bvhBoxes[_cmp][1]),
                    UNPACK_LANE_(bvhBoxes[_cmp][2])
                ), nears, fars);

                bool nearFirst = nears.x <= nears.y;
                childIntersect &= BVEC2_(lessThanEqual(nears, traverseState.bvhSpace.cutOut.xx));

                IF (any(childIntersect)) {
                    traverseState.bitStack <<= 1;
                    IF (all(childIntersect)) {
                        traverseState.bitStack |= 1;
                        traverseState.idx = nearFirst ? comp4.x : comp4.y;
                    } else {
                        traverseState.idx = SSC(childIntersect.x) ? comp4.x : comp4.y;
                    }
                    _continue = true;
                }
                
            } else  
            
            // if leaf, defer for intersection 
            if (comp4.x == comp4.y) {
                if (traverseState.defTriangleID < 0) {
                    traverseState.defTriangleID = comp4.w;
                } else {
                    _continue = true;
                }
            }

            if (!_continue) {
                
                // go to parents so far as possible 
                for (int bi=0;bi<64;bi++) {
                    if ((traverseState.bitStack&1ul)!=0ul || traverseState.bitStack==0ul) break;
                    traverseState.idx = texelFetch(bvhStorage, bvhLinear2D(traverseState.idx), 0).z, traverseState.bitStack >>= 1;
                }

                // goto to sibling or break traverse
                if (traverseState.bitStack!=0ul) {
                    traverseState.idx += (traverseState.idx%2==0?1:-1)*int(traverseState.bitStack&1ul); traverseState.bitStack &= ~1ul;
                } else {
                    traverseState.liveState = false;
                }

            } _continue = false;

            // pause, because found intersection 
            IFALL (traverseState.defTriangleID >= 0 || !traverseState.liveState) break; // pause traversing
        }

        // do intersection of found geometry
        doIntersection();
    }

    // if has any intersection, include to result list
    IF (lessF(traverseState.geometrySpace.lastIntersection.z, INFINITY)) {
        includeChain(traverseState.geometrySpace.lastIntersection);
    }
}




LOCAL_SIZE_LAYOUT;

void main() {
    //int wsize = arcounter.tT;
    #define wsize arcounter.tT
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 100000);
    rayID = (int(gl_WorkGroupID.x) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x));

    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int it = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x); //rayID = it;
        BOOL_ overflow = BOOL_(it >= wsize);
        IFALL(overflow) break;
        accquireUnordered(it);

        // begin traverse (save to caches)
        overflow |= not(RayActived(currentRay)) | BOOL_(currentBlock < 0 || currentBlockNode < 0);
        nodeCache[rayID].info.nextHt = floatBitsToInt(currentRay.origin.w);
        
        // do BVH traversing 
        doBvhTraverse(currentRay.origin.xyz, dcts(currentRay.cdirect.xy), not(overflow));

        // resolve intersection
        int chainID = nodeCache[rayID].info.chainID;
        if (chainID > 0 && SSC(not(overflow))) {
            currentRay.origin.w = intBitsToFloat(chainID); storeRay();
        }

    }
}
