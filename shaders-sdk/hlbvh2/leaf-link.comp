#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_PACKED_LOADER
#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

void main() {
    //int wsize = bvhBlock.creatorUniform.leafCount;
    #define wsize (bvhBlock.creatorUniform.leafCount)
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 50000);
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(LT_IDX);
        IFALL(globalID >= wsize) break;
        if (globalID < wsize && globalID >= 0) {
            int idx = LeafIndices[globalID];
            if (idx >= 0) {
                ivec2 _idx2 = bvhLinear2D(idx);
                ivec4 bvhmeta = imageLoad(bvhStorage, _idx2);
                uint leafID = MortoncodesIndices[bvhmeta.x];
                Leafs[leafID].pdata.z = int(idx);
                HlbvhNode leaf = Leafs[leafID];
                imageStore(bvhStorage, _idx2, ivec4(bvhmeta.xx, bvhmeta.z, leaf.pdata.w));

                int bidx = idx>>1, sidx = idx&1;
                bvhBoxesWork[bidx][sidx*2+0] = leaf.lbox[0];
                bvhBoxesWork[bidx][sidx*2+1] = leaf.lbox[1];
            }
        }
    }
}
