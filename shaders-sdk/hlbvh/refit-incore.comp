#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define FLATTEN_BOX // simplify bvh traversing by transposing in builder level
#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

//const int work_size = 1024;
//layout ( local_size_x = work_size ) in;

initAtomicSubgroupIncFunction(aCounter, aCounterInc, 1, int)

void unifyNodeBox(in int idx){
    int sibid = imageLoad(bvhStorage, bvhLinear2D(idx)).x >> 1;

    // TODO: unpacking correction rows
#ifdef USE_F32_BVH
    FVEC4_  
        lmn = uintBitsToFloat(bvhBoxes[sibid][0]), rmn = uintBitsToFloat(bvhBoxes[sibid][2]),
        lmx = uintBitsToFloat(bvhBoxes[sibid][1]), rmx = uintBitsToFloat(bvhBoxes[sibid][3]);
#else
    FVEC4_  
        lmn = UNPACK_HF(bvhBoxes[sibid][0].xy), rmn = UNPACK_HF(bvhBoxes[sibid][1].xy),
        lmx = UNPACK_HF(bvhBoxes[sibid][0].zw), rmx = UNPACK_HF(bvhBoxes[sibid][1].zw);
#endif

    int bidx = idx>>1, sidx = idx&1;
#ifdef USE_F32_BVH
    bvhBoxes[bidx][sidx*2+0] = floatBitsToUint(min(lmn, rmn));
    bvhBoxes[bidx][sidx*2+1] = floatBitsToUint(max(lmx, rmx));
#else
    bvhBoxes[bidx][sidx+0] = uvec4(packHalf2(min(lmn, rmn)), packHalf2(max(lmx, rmx)));
    bvhBoxes[bidx][sidx+2] = uvec4(0u.xxxx);
#endif

    // shuffle and transpose for traversing
#ifdef USE_F32_BVH
    bvhBoxes[sibid][0] = floatBitsToUint( FVEC4_(lmn.x, rmn.x, lmx.x, rmx.x) );
    bvhBoxes[sibid][1] = floatBitsToUint( FVEC4_(lmn.y, rmn.y, lmx.y, rmx.y) );
    bvhBoxes[sibid][2] = floatBitsToUint( FVEC4_(lmn.z, rmn.z, lmx.z, rmx.z) );
    bvhBoxes[sibid][3] = floatBitsToUint( FVEC4_(lmn.w, rmn.w, lmx.w, rmx.w) );
#else
    // TODO: support of corrections fields
    bvhBoxes[sibid][0].xyzw = uvec4(packHalf2( FVEC4_(lmn.x, rmn.x, lmx.x, rmx.x) ), 0u.xx);
    bvhBoxes[sibid][1].xyzw = uvec4(packHalf2( FVEC4_(lmn.y, rmn.y, lmx.y, rmx.y) ), 0u.xx);
    bvhBoxes[sibid][2].xyzw = uvec4(packHalf2( FVEC4_(lmn.z, rmn.z, lmx.z, rmx.z) ), 0u.xx);
    bvhBoxes[sibid][3].xyzw = uvec4(packHalf2( FVEC4_(lmn.w, rmn.w, lmx.w, rmx.w) ), 0u.xx);
#endif
}


void main() {
    int n = bvhBlock.creatorUniform.leafCount;
    int wcount = min(tiled(n, int(gl_WorkGroupSize.x)), 50000);
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x); if (globalID >= n) break;
        if (globalID < n && globalID >= 0) {
            int idx = exchange(LeafIndices[globalID], -1);
            for (int l=0;l<256;l++) {
                ivec4 cmp4 = imageLoad(bvhStorage, bvhLinear2D(idx));

                bool validParent = cmp4.z >= 0 && idx >= 0;
                if (validParent) {
                    int _swp = atomicCompSwap(Flags[cmp4.z], 0, 1);
                    validParent = validParent && _swp == 1; // resolve race condition
                    if (validParent) { idx = cmp4.z; } else { idx = -1; }
                } else {
                    idx = -1;
                }

                if (idx >= 0) {
                    cmp4 = imageLoad(bvhStorage, bvhLinear2D(idx));
                    if (cmp4.x != cmp4.y) unifyNodeBox(idx);
                } else {
                    break;
                }
            }
        }
    }
}
