#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;

shared uint localHistogram[RADICES];

// shared for 16 threads (with lanes)
shared UVEC64_WARP _data[WARP_SIZE];
#define data _data[LANE_IDX]

shared UVEC_WARP _dataValue[WARP_SIZE];
#define dataValue _dataValue[LANE_IDX]

initNonAtomicIncFunctionDynamic(localHistogram, countOffset, uint)

void main() {
    LT_IDX = gl_LocalInvocationID.x;
    LC_IDX = (gl_LocalInvocationID.x / WARP_SIZE_RT);
    LANE_IDX = (gl_LocalInvocationID.x % WARP_SIZE_RT);
    uint WSZ = WARP_SIZE_RT;

    // calculate blocks
    blocks_info blocks = get_blocks_info(NumKeys);
    uint bcount = min(blocks.count, 16384);

    // barrier-less, WARP-optimized histogram calculation
    for (uint rk=0;rk<RADICES;rk+=WORK_SIZE_RT) {
        uint addr = blocks.offset + LANE_IDX;
        uint radice = rk + LC_IDX;
        if (radice >= RADICES) break; 

        // copy to local histogram
        localHistogram[radice] = PrefixSum[radice + gl_WorkGroupID.x * RADICES]; // clear histogram of block

        // use SIMD lanes for calculate histograms
        for ( uint wk = 0; wk < bcount; wk++ ) {
            BVEC_WARP validAddress = addr < NumKeys;
            //if (!validAddress) break; // no need more 
            IFALL(!validAddress) break;

            memoryBarrier(); barrier();
            if (LC_IDX == 0) {
                data = validAddress ? UVEC64_WARP(KeyTmp[addr]) : 0xFFFFFFFFFFFFFFFFul;
                dataValue = validAddress ? ValueTmp[addr] : 0u;
            }
            memoryBarrier(); barrier();

            UVEC_WARP k = UVEC_WARP(BFE(data, int(Shift*BITS_PER_PASS), BITS_PER_PASS));

            // compressive putting
            BVEC_WARP vld = k == radice && validAddress;
            if (vld) {
                UVEC_WARP offset = countOffset(radice, vld);
                KeyIn[offset] = KEYTYPE(data);
                ValueIn[offset] = dataValue;
            }

            addr += WARP_SIZE_RT;
        }
    }

    
}
