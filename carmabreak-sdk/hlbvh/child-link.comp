#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_PACKED_LOADER
#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

void main() {
    //int wsize = GEOMETRY_BLOCK geometryUniform.triangleCount;
    #define wsize (GEOMETRY_BLOCK geometryUniform.triangleCount)
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 50000);
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(LT_IDX);
        IFALL(globalID >= wsize) break;
        if (globalID < wsize && globalID >= 0) {
            int idx = LeafIndices[globalID];
            if (idx >= 0) {
                ivec2 _idx2 = bvhLinear2D(idx), range = imageLoad(bvhStorage, _idx2 * ivec2(4,1) + ivec2(0,0)).xx;
                uint leafID = MortoncodesIndices[range.x];
                exchange(Leafs[leafID].pdata.z, int(idx));
                HlbvhNode leaf = Leafs[leafID];
                imageStore(bvhStorage, _idx2 * ivec2(4,1) + ivec2(0,0), range.xxxx);
                imageStore(bvhStorage, _idx2 * ivec2(4,1) + ivec2(1,0), range.xxxx);
                imageStore(bvhStorage, _idx2 * ivec2(4,1) + ivec2(3,0), leaf.pdata.wwww);
                
                ivec2 _dix2 = bvhLinear2DH(idx);
                imageStore(bvhBoxes, _dix2 + ivec2(0,0), UNPACK_LANE_(leaf.lrbox[0]));
                imageStore(bvhBoxes, _dix2 + ivec2(0,1), UNPACK_LANE_(leaf.lrbox[2]));
            }
        }
    }
}
