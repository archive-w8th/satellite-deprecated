#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define USE_SIMPLIFIED_MODE

#ifndef MAX_DEPTH
#define MAX_DEPTH 16
#endif

#include "../include/constants.glsl"

#define USE_SINGLE_THREAD_RAY_MANAGMENT

#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"
#include "../include/shadinglib.glsl"
#include "../rendering/environment.glsl"

struct SurfaceUnpacked {
     vec4 uvt; // UV, distance, triangle
     vec4 normalHeight; // normal with height mapping, will already interpolated with geometry
     vec4 metallicRoughness;
     vec4 tangent;
     vec4 bitangent;

    // color parameters
     vec4 emission;
     vec4 albedo;
} compositedHit;

int wasHit = -1;
#define hasProcedural (proceduralID != -1)

#define hit firstHit

float randomed(in float r){ return random() < r ? 1.f : 0.f; }

// ray hit states 
// 0 - invalid hit
// 1 - shadow, have no hit in traversing (enviroment only)
// 5 - shadow, may overlap with geometry
// 3 - regular, have no intersection (environment)
// 7 - regular, have intersection

// bitfield of state
// 0 - activity of incoming ray
// 1 - shadow ray type 
// 2 - have intersection status or not

int invokeSurface(inout bool overflow) {
    HitRework firstHit; firstHit.bitfield = 0; HitActived(firstHit, FALSE_); wasHit = -1; // initial hit

    // initial composition
    compositedHit.uvt = vec4(vec2(0.f), INFINITY, intBitsToFloat(-1));
    compositedHit.emission = vec4(0.f);
    compositedHit.albedo = vec4(0.f,0.f,0.f,0.f);
    compositedHit.normalHeight = vec4(0.f);
    compositedHit.metallicRoughness = vec4(0.f);
    compositedHit.tangent = vec4(0.f);

    // if hit was had
    wasHit = overflow ? -1 : floatBitsToInt(currentRay.origin.w)-1;
    if (wasHit >= 0) firstHit = hits[wasHit];

    // if not found
    IF (HitActived(firstHit)) { // if none, make as transparent
        compositedHit.uvt = firstHit.uvt;
        compositedHit.albedo = f16_f32(firstHit.albedo);
        compositedHit.emission = f16_f32(firstHit.emission);
        compositedHit.metallicRoughness.xy = f16_f32(hit.metallicRoughness).xy;
        compositedHit.normalHeight = firstHit.normalHeight;
        compositedHit.tangent = firstHit.tangent;
        compositedHit.bitangent = firstHit.bitangent;
    } else {
        wasHit = -1;
    }

    IF (greaterEqualF(compositedHit.uvt.z, INFINITY-0.0001f)) wasHit = -1;
    WriteColor(currentRay.dcolor, vec4(max(0.0f.xxxx, f16_f32(currentRay.dcolor)).xyz, 1.f));
    currentRay.origin.xyz = fma(dcts(currentRay.cdirect.xy), compositedHit.uvt.zzz, currentRay.origin.xyz); // current set origin by distance
    currentRay.origin.w = FINT_NULL; // reset chains
    if (overflow) RayActived(currentRay, FALSE_); // if had overflow, invalidate ray

    // getting ray state
    int rayState = 0; // invalid ray 
    if (SSC(RayActived(currentRay)) && mlength(f16_f32(currentRay.dcolor.xy).xyz) > 0.00001f) {
        if (RayType(currentRay) == 2) {
            rayState = wasHit >= 0 ? 5 : 1;
        } else {
            rayState = wasHit >= 0 ? 7 : 3;
        }
    }
    return rayState;
}


void invalidateRay(inout RayRework rayTemplate, in bool overflow){
    if (overflow || SSC(RayActived(rayTemplate)) && (RayBounce(rayTemplate) <= 0 || RayDiffBounce(rayTemplate) <= 0 || mlength(f16_f32(rayTemplate.dcolor).xyz) <= 0.00001f)) {
        RayActived(rayTemplate, FALSE_);
        WriteColor(rayTemplate.dcolor, 0.f.xxxx); // no mechanism for detect emission
    }
}


RayRework envShading(in RayRework currentRay, inout bool skipping) {
    RayRework rayTemplate = currentRay;

    // bad ray
    if (skipping) {
        RayActived(rayTemplate, FALSE_);
        WriteColor(rayTemplate.dcolor, 0.f.xxxx);
    }

    // apply physical lights
    int lc = -1;
    IF (RayDL(rayTemplate) & RayActived(rayTemplate)) {
        const int lcount = min(RAY_BLOCK materialUniform.lightcount, 16);
        vec3 origin = rayTemplate.origin.xyz;
        vec3 direct = dcts(rayTemplate.cdirect.xy);

        for (int i=0;i<lcount;i++) {
            float md = 1.0f;
            float dt = intersectSphere(origin = fma(direct, -compositedHit.uvt.zzz, origin), direct, lightCenter(i).xyz, lightUniform.lightNode[i].lightColor.w + GAP);
            float t = md * dt;
            IF (lessF(dt, INFINITY) & lessEqualF(t, compositedHit.uvt.z)) lc = i;
        }
    }

    // shade light
    if (lc >= 0 && (RayTargetLight(rayTemplate) == lc || RayType(rayTemplate) != 2) && SSC(RayActived(rayTemplate))) {
        WriteColor(rayTemplate.dcolor, f16_f32(rayTemplate.dcolor) * vec4(getLightColor(lc), 1.f));
        RayActived(rayTemplate, FALSE_);
        skipping = true;
    }

    // apply background
    vec4 color = vec4(0.0f); EnvironmentShader(color, rayTemplate); //color.xyz = toLinear(max(color.xyz, vec3(0.f)));
    if (wasHit == -1 && SSC(RayActived(rayTemplate)) && RayType(rayTemplate) != 2) {
        WriteColor(rayTemplate.dcolor, f16_f32(rayTemplate.dcolor) * vec4(color.xyz, 1.f));
        RayActived(rayTemplate, FALSE_);
        skipping = true;
    }

    // wrong ray?
    if (wasHit == -1 && SSC(RayActived(rayTemplate))) {
        RayActived(rayTemplate, FALSE_);
        WriteColor(rayTemplate.dcolor, 0.0f.xxxx);
        skipping = true;
    }

    return rayTemplate;
}


int createBlockOnce(inout int block, in bool minimalCondition){
    if (anyInvoc(block < 0 && minimalCondition)) {
        int activeLane = firstActive();
        if (LANE_IDX == activeLane) { block = createBlock(); } block = readLane(block, activeLane);
        for (int tb = 0; tb < R_BLOCK_SIZE; tb += WARP_SIZE_RT) {
            int nid = tb + int(LANE_IDX);
            rayBlockNodes[block][nid].data.dcolor = uvec2((0u).xx);
            WriteColor(rayBlockNodes[block][nid].data.dcolor, 0.0f.xxxx);
            RayActived(rayBlockNodes[block][nid].data, FALSE_);
            RayBounce(rayBlockNodes[block][nid].data, 0);
            rayBlocks[block].indices[nid] = IDCTYPE(-1);
        }
    }
    return block;
}


void invokeBlockForNodes(inout RayRework rayTemplate, in int occupyCriteriaID, inout int outNewBlock, inout int prevNonOccupiedBlock, inout bool mergable, const bool overrideOccupy) {
    invalidateRay(rayTemplate, false);
    
    bool occupyCriteria = SSC(RayActived(rayTemplate)) || !SSC(RayActived(rayTemplate)) && mlength(f16_f32(rayTemplate.dcolor).xyz) >= 0.00001f;
    
    createBlockOnce(outNewBlock, occupyCriteria && !mergable); 
    if (outNewBlock >= 0) prevNonOccupiedBlock = outNewBlock;
    
    if (occupyCriteria) storeRay(prevNonOccupiedBlock, rayTemplate);
    confirmNode(prevNonOccupiedBlock, SSC(RayActived(rayTemplate)));

    if ( !anyInvoc(overrideOccupy)) {
        mergable = mergable && (prevNonOccupiedBlock != outNewBlock);
    }
}


void emitBlock(in int block) {
    if (anyInvoc(block >= 0)) {
        
        bool hasIllumination = false;
        for (int tb = 0; tb < R_BLOCK_SIZE; tb += WARP_SIZE_RT) { 
            int bidx = int(tb + LANE_IDX), idx = rayBlocks[block].preparing[bidx];
            if (bidx >= 0 && bidx < rayBlocks[block].info.indiceCount) {
                rayBlocks[block].indices[bidx] = IDCTYPE(idx);
            } else {
                rayBlocks[block].indices[bidx] = IDCTYPE(-1);
            }
            hasIllumination = hasIllumination || anyInvoc(hasIllumination || 
                (idx >= 0 && block >= 0 ? 
                mlength(f16_f32(rayBlockNodes[block][idx].data.dcolor).xyz) > 0.00001f && !SSC(RayActived(rayBlockNodes[block][idx].data)) : 
                false));
        }
        hasIllumination = hasIllumination || anyInvoc(hasIllumination);

        // confirm block or flush
        if (LANE_IDX == 0) {
            if (rayBlocks[block].info.indiceCount > 0 && RAY_BLOCK samplerUniform.iterationCount < (MAX_DEPTH-1)) { 
                confirmBlock(block); 
            } else { 
                flushBlock(block, hasIllumination); 
            }
        }
    }
}


LOCAL_SIZE_LAYOUT;


void main() {
    #define wsize RAY_BLOCK samplerUniform.blockCount
    //int wsize = RAY_BLOCK samplerUniform.blockCount;
    int wcsize = int(gl_WorkGroupSize.x) / int(WARP_SIZE_RT);
    int wcount = min(tiled(wsize, wcsize), 50000);

    // invoke available blocks
    bool overflow = false;
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * wcsize + int(LC_IDX);
        globalInvocationSMP = globalID;

        // check if not reached blocks limit
        overflow = overflow || anyInvoc(overflow || anyInvoc(globalID >= wsize));
        IFALL(overflow) break;
        if (!overflow) {
            
            // accquire shading block
            currentBlock = -1;
            if (!overflow) accquireBlock(globalID);
            bool invld = anyInvoc(overflow || currentBlock < 0 || currentBlockSize <= 0);
            if (invld) { currentBlock = -1; continue; }
            
            resetBlockIndiceCounter(currentBlock);
            int shadowBlock = -1, emissionBlock = -1, diffuseBlock = -1, reflectionBlock = -1;

            // invoke block data
            if (!invld) {
                int bts = min(R_BLOCK_SIZE, currentBlockSize);
                for (int tb = 0; tb < bts; tb += WARP_SIZE_RT) {
                    int nid = tb + int(LANE_IDX);
                    randomClocks = 0, subHash = nid; // reset random clocks
                    bool overflow = invld || overflow || nid >= bts || nid < 0;
                    IFALL(overflow) break;
                    accquireNode(nid); overflow = overflow || currentBlockNode < 0;
                    IFALL(overflow) break;

                    // get surface information
                    int rayState = invokeSurface(overflow);

                    // constants
                    const float IOR = 1.400f;
                    const float diffuse_min_importance = 0.5f;
                    const float reflect_min_importance = 0.5f;
                    const vec3 max_fresnel_color = toLinear(vec3(1.f));
                    const vec3 min_fresnel_color = toLinear(vec3(1.f));

                    // get normals
                    vec3 surfacenormal = compositedHit.normalHeight.xyz;
                    vec3 normal = faceforward(surfacenormal, dcts(currentRay.cdirect.xy), surfacenormal);
                    mat3 tbn = mat3(compositedHit.tangent.xyz, compositedHit.bitangent.xyz, normal.xyz);

                    // get texture composition data
                    vec4 diffcolor = compositedHit.albedo;
                    vec4 emiscolor = compositedHit.emission;
                    float refly = compositedHit.metallicRoughness.x; // roughness
                    float metallic = sqrt(compositedHit.metallicRoughness.y); // metallic

                    vec3 freflcolor = fmix(max_fresnel_color * 1.f, min_fresnel_color * 0.1f, clamp(pow(abs(dot(dcts(currentRay.cdirect.xy), normal)), IOR - 1.f), 0.0f, 1.0f).xxx);
                    vec3 speccolor = fmix(freflcolor, diffcolor.xyz, metallic.xxx);
                    
                    // coefficents
                    float prom = clamp01(1.f - diffcolor.w); // transmission power
                    float spca = fmix(mlength(freflcolor), 1.f, metallic.x);

                    // if environment shaded, do by defaultly as transaparent, by inactive
                    if ( rayState == 3 || rayState == 1 ) prom = 1.0f;
                    
                    // binarize/quantize 
                    float qprom = random() < prom ? 1.f : 0.f;
                    float qspca = random() < spca ? 1.f : 0.f;

                    // emit that ray 
                    int overwriteBlock = currentBlock; bool mergable = true;

                    { // environment and transparent rays 
                        RayRework envShadedRay = promised(envShading(currentRay, overflow), tbn);
                        WriteColor(envShadedRay.dcolor, f16_f32(envShadedRay.dcolor) * (RayType(currentRay) == 2 ? prom : qprom) ); // shadows dims 
                        invokeBlockForNodes(envShadedRay, 2, currentBlock, overwriteBlock, mergable, true);
                    }
                    
                    // don't do shading if shadowed 
                    if (rayState == 5 || rayState == 1) { prom = 1.f, qprom = 1.f; };

                    { // diffuse rays
                        RayRework rayTemplate = diffuse(currentRay, diffcolor.xyz * (1.f - qspca) * (1.f - qprom), tbn);
                        invokeBlockForNodes(rayTemplate, 0, diffuseBlock, overwriteBlock, mergable, true);
                    }

                    { // reflection rays
                        RayRework rayTemplate = reflection(currentRay, clamp01(speccolor.xyz / spca) * qspca * (1.f - qprom), tbn, refly);
                        invokeBlockForNodes(rayTemplate, 0, reflectionBlock, overwriteBlock, mergable, true);
                    }

                    { // emissions
                        RayRework rayTemplate = emissive(currentRay, emiscolor.xyz * (1.f - freflcolor * (1.f - metallic)) * (1.f - prom), tbn);
                        invokeBlockForNodes(rayTemplate, 1, emissionBlock, overwriteBlock, mergable, true);
                    }

                    { // shadow rays
                        mergable = false;
                        RayRework rayTemplate = directLight(0, currentRay, diffcolor.xyz * (1.f - spca) * (1.f - prom), tbn);
                        invokeBlockForNodes(rayTemplate, 0, shadowBlock, overwriteBlock, mergable, true);
                    }
                }
            }

            {
                emitBlock(emissionBlock);
                emitBlock(reflectionBlock);
                emitBlock(diffuseBlock);
                emitBlock(shadowBlock);
                emitBlock(currentBlock);
            }
            
        }
    }
}
