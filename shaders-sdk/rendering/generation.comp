#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define USE_SINGLE_THREAD_RAY_MANAGMENT

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"


const int _SEED_ID = 15;

uint createBlockOnce(inout uint block, in bool minimalCondition, in uint binID){
    if (anyInvoc(int(block) < 0 && minimalCondition)) {
        uint activeLane = firstActive();
        if (LANE_IDX == activeLane) { block = createBlock(block, binID); } block = readLane(block, activeLane);
        for (int tb = 0; tb < int(R_BLOCK_SIZE); tb += int(WARP_SIZE_RT)) {
            int nid = tb + int(LANE_IDX);
            rayBlockNodes[block][nid].data.dcolor = uvec2((0u).xx);
            rayBlockNodes[block][nid].data.origin.w = 0;
            WriteColor(rayBlockNodes[block][nid].data.dcolor, 0.0f.xxxx);
            RayActived(rayBlockNodes[block][nid].data, FALSE_);
            RayBounce(rayBlockNodes[block][nid].data, 0);
            m16s(uint(-1), blockIndiceHeader(block), nid);
            m16s(uint(-1), blockPreparingHeader(block), nid);
        }
    }
    return block;
}




LOCAL_SIZE_LAYOUT;


void main()
{
    ivec2 wh = ivec2(RAY_BLOCK samplerUniform.sceneRes.xy);
    ivec2 blk = ivec2(tiled(wh.x, int(R_BLOCK_WIDTH)), tiled(wh.y, int(R_BLOCK_HEIGHT)));

    vec2 sceneResInv = 1.0f / vec2(wh);
    int wsize = blk.x * blk.y;
    int wcsize = int(gl_WorkGroupSize.x) / int(WARP_SIZE_RT);
    int wcount = min(tiled(wsize, wcsize), 1000000);

    // invoke available blocks
    bool overflow = false;
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * wcsize + int(LC_IDX);
        globalInvocationSMP = globalID;

        int binID = globalID;
        blockBins[binID].blockStart = uint(-1);
        blockBins[binID].previousReg = uint(-1);
        blockBins[binID].texelHeader = uint(-1);
        
        // check if not reached blocks limit
        overflow = overflow || anyInvoc(overflow || anyInvoc(globalID >= wsize));
        IFALL(overflow) break;
        if (!overflow) { 
            // create unique tile per WARP
            uint blockID = uint(-1);
            createBlockOnce(blockID, true, binID);
            accquirePlainBlock(blockID); 
            IFANY(currentBlock < 0 || currentBlockSize <= 0) continue; 

            // allocate texel heading (2x16-bit)
            if (LANE_IDX == 0) {
                blockBins[binID].texelHeader = atomicIncRT(2)+1; 
            }

            // make division
            ivec2 divxy = ivec2(globalID % blk.x, globalID / blk.x) * ivec2(R_BLOCK_WIDTH, R_BLOCK_HEIGHT);

            // invoke block data
            for (int tb = 0; tb < int(R_BLOCK_SIZE); tb += int(WARP_SIZE_RT)) {
                int nid = tb + int(LANE_IDX);
                randomClocks = 0, subHash = nid; // reset random clocks
                accquirePlainNode(blockID, nid); // accquire by lane
                
                // by default is inactive
                currentRay.cdirect = vec2(0.f.xx);
                currentRay.origin = vec4(vec3(0.f.xxx), FINT_NULL);
                RayActived(currentRay, FALSE_);

                // default colors of rays
                WriteColor(currentRay.dcolor, vec4(0.f.xxx, 0));

                // get 2D index
                ivec2 bc = ivec2(nid % R_BLOCK_WIDTH, nid / R_BLOCK_WIDTH);
                ivec2 xy = divxy + bc;
                overflow = overflow || nid >= R_BLOCK_SIZE || bc.y >= R_BLOCK_HEIGHT || nid < 0;

                bool vbn = xy.x < wh.x && xy.y < wh.y && !overflow;

                // prison coding
                int idx = xy.x + xy.y * wh.x;
                m16s(0xFFFFu, (blockBins[binID].texelHeader-1)+0, nid);
                m16s(0xFFFFu, (blockBins[binID].texelHeader-1)+1, nid);

                IFALL(overflow) break;
                
                if (vbn) {
                    m16s(vbn ? BFE_HW(idx, 0,16) : 0xFFFFu, (blockBins[binID].texelHeader-1)+0, nid);
                    m16s(vbn ? BFE_HW(idx,16,16) : 0xFFFFu, (blockBins[binID].texelHeader-1)+1, nid);

                    vec2 rnd = randf2x(rayStreams[_SEED_ID].superseed.x);
                    vec2 coord = (vec2(xy) + clamp(rnd, vec2(0.0001f), vec2(0.9999f))) * sceneResInv;
                    
                    Texel txfi = texelBuf.nodes[idx];
                    txfi.coord.x = coord.x;
                    txfi.coord.y = coord.y;
                    txfi.color = 0.f.xxxx; // debug white
                    texelBuf.nodes[idx] = txfi;
                    
                    vec4 dir = vec4(0.f), orig = mult4(RAY_BLOCK cameraUniform.camInv, vec4(vec3(0.0f), 1.0f)), eye = orig;
                    if (RAY_BLOCK cameraUniform.enable360 == 1) {
                        vec2 pic = (coord * vec2(2.f,1.f) + vec2(0.5f,0.0f)) * PI;
                        dir = mult4(RAY_BLOCK cameraUniform.camInv, vec4(dcts(pic), 0.f));
                    } else {
                        vec4 co = divW(mult4(RAY_BLOCK cameraUniform.camInv, mult4(RAY_BLOCK cameraUniform.projInv, vec4(coord * 2.0f - 1.0f, 0.999f, 1.0f))));
                        orig = divW(mult4(RAY_BLOCK cameraUniform.camInv, mult4(RAY_BLOCK cameraUniform.projInv, vec4(coord * 2.0f - 1.0f, 0.001f, 1.0f))));
                        dir = vec4(normalize(co.xyz - orig.xyz)*vec3(1.f,1.f,1.f), 0.0f);
                    }

                    texelBuf.nodes[idx].p3d = vec4(fma(dir.xyz, INFINITY.xxx, eye.xyz), 1.f);
                    texelBuf.nodes[idx].albedo = vec4(0.f);
                    texelBuf.nodes[idx].normal = vec4(0.0f, 0.0f, 1.f, 0.f);

                    // apply DOF
#ifdef EXPERIMENTAL_DOF
                    float dofFocusRadius = 10.f;
                    float dofFocalRadius = 1.f / 16.f;
                    vec4 defEye = RAY_BLOCK cameraUniform.camInv * vec4(0.0f, 0.0f, 0.0f, 1.0f);
                    vec4 focus = defEye + dir * dofFocusRadius;
                    vec4 offsetEye = RAY_BLOCK cameraUniform.camInv * vec4(randomCosine(dir.xyz) * dofFocalRadius, 1.0f);
                    orig = offsetEye;
                    dir = vec4(normalize(focus.xyz - offsetEye.xyz), 0.0f);
#endif

                    currentRay.cdirect = lcts(dir.xyz);//vec4(dir.xyz, FINT_ZERO);
                    currentRay.origin = vec4(orig.xyz, FINT_NULL);
                    
                    // set default bitset
                    currentRay.dcolor = uvec2((0u).xx);
                    WriteColor(currentRay.dcolor, vec4(1.f.xxx, 0));

                    RayActived(currentRay, TRUE_);
                    RayType(currentRay, 3); // primary rays
                    RayDL(currentRay, FALSE_);

                    // reserved bounces
                    RayBounce(currentRay, 3);
                    RayDiffBounce(currentRay, 2);

                    if (RAY_BLOCK cameraUniform.interlace == 1) {
                        if ((abs(xy.x + xy.y) % 2) == RAY_BLOCK cameraUniform.interlaceStage) {
                            RayActived(currentRay, FALSE_);
                        }
                    }
                }
                
                confirmNode(blockID, RayActived(currentRay) == TRUE_);
                storeRay(blockID, currentRay);
            }

            for (int tb = 0; tb < int(R_BLOCK_SIZE); tb += int(WARP_SIZE_RT)) {
                copyBlockIndices(currentBlock, tb + int(LANE_IDX));
            }

            if (LANE_IDX == 0) {
                if (blockLength(blockID) >= 1) {
                    confirmBlock(blockID);
                }
                //flushBlock(blockID, true);
            }
        }
    }
}
