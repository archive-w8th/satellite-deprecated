#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define FLATTEN_BOX

#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING // store rays in registers if possible

//#define USE_STACKLESS_BVH


#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/morton.glsl"
#include "../include/mathlib.glsl"
#include "../include/vertex.glsl"

// terrorist ray
ElectedRay currentRayTmp;

#ifdef ENABLE_AMD_INSTRUCTION_SET // RX Vega may have larger local shared memory and wider bandwidth
const int stackPageCount = 2;
const int localStackSize = 16;
#else
const int stackPageCount = 4;
const int localStackSize = 8;
#endif

// for structured copying
struct PagedStack { int stack[localStackSize]; };



// dedicated BVH stack
struct NodeCache { PagedStack stackPages[stackPageCount]; };
layout ( std430, binding = 16, set = 0 ) restrict buffer TraverseNodes { NodeCache nodeCache[]; };

// reserved block
layout ( std430, binding = 17, set = 0 ) restrict buffer TraverseBlock { uvec4 blockCache[]; };


int stackPtr = 0, pageIdx = -1; int rayID = 0;

#ifndef USE_STACKLESS_BVH
#define LOCAL_STACK localStack[LT_IDX].stack
shared PagedStack localStack[WORK_SIZE];

int loadStack(){
    int ptr = --stackPtr; int val = -1;

    // load previous stack page
    if (ptr < 0) { int page = pageIdx--; 
        if (page >= 0) {
            stackPtr = ptr = localStackSize-1;
            localStack[LT_IDX] = nodeCache[rayID].stackPages[page];
        }
    }

#ifdef USE_FAST_OFFLOAD
    if (ptr >= 0) { val = LOCAL_STACK[ptr]; }
#else
    if (ptr >= 0) { val = exchange(LOCAL_STACK[ptr], -1); }
#endif
    return val;
}

void storeStack(in int val){
    int ptr = stackPtr++;

    // store stack to global page, and empty list
    if (ptr >= localStackSize) { int page = ++pageIdx;
        if (page >= 0 && page < stackPageCount) {
            stackPtr = 1, ptr = 0;
            nodeCache[rayID].stackPages[page] = localStack[LT_IDX];
        }
    }

    if (ptr < localStackSize) { LOCAL_STACK[ptr] = val; }
}

bool stackIsFull() { return stackPtr >= localStackSize && pageIdx >= stackPageCount; }
bool stackIsEmpty() { return stackPtr <= 0 && pageIdx < 0; }
#endif




// merge cached intersections to hit buffer
void includeChain(inout vec4 intersection) {
    uint hid = atomicIncHT()+1;
    HitRework hitp = hits[hid-1];
    hitp.uvt = intersection;
    hitp.next = -1; //nodeCache[rayID].info.nextHt; // for future overriding
    hitp.ray = int(currentRayTmp.uindex.x)-1;
    hitp.bitfield = 0;
    hitp.albedo = packHalf2(vec4(1.f, 1.f, 1.f, 1.f));
    hitp.metallicRoughness = packHalf2(vec4(vec2(1.f, 0.f), 0.f, 0.f));
    hitp.emission = packHalf2(vec4(0.f));
    hits[hid-1] = hitp;
    currentRayTmp.origin.w = uintBitsToFloat(hid);
}

struct GeometrySpace {
    int axis; mat3 iM;
    vec4 lastIntersection;
};

struct BVHSpace {
    FVEC3_ minusOrig, directInv; BVEC3_ boxSide;
    float cutOut;
};

struct BvhTraverseState {
    int idx, defTriangleID;
    float distMult, diffOffset;

    uint64_t bitStack;
    GeometrySpace geometrySpace;
    BVHSpace bvhSpace;
} traverseState;


void doIntersection() {
    BOOL_ near = BOOL_(traverseState.defTriangleID >= 0);
    vec2 uv = vec2(0.f.xx);
    float d = intersectTriangle(currentRayTmp.origin.xyz, traverseState.geometrySpace.iM, traverseState.geometrySpace.axis, traverseState.defTriangleID.x, uv.xy, near.x, traverseState.geometrySpace.lastIntersection.z);

    float _nearhit = traverseState.geometrySpace.lastIntersection.z;
    IF (lessF(d, _nearhit)) { traverseState.bvhSpace.cutOut = d * traverseState.distMult; }
    
    // validate hit 
    near &= lessF(d, INFINITY) & lessEqualF(d, _nearhit);
    IF (near.x) traverseState.geometrySpace.lastIntersection = vec4(uv.xy, d.x, intBitsToFloat(traverseState.defTriangleID.x));

    // reset triangle ID 
    traverseState.defTriangleID = -1;
}


void doBvhTraverse(inout vec3 origin, in vec3 direct, in BOOL_ valid) {
    // initial state
    traverseState.idx = SSC(valid) ? 0 : -1;
    traverseState.bitStack = 0ul;
    traverseState.defTriangleID = -1;
    traverseState.distMult = 1.f;
    traverseState.diffOffset = 0.f;
    traverseState.bvhSpace.cutOut = INFINITY;

    // reset stack
    stackPtr = 0, pageIdx = -1;

    // auto-clean stack from sh*t
#ifndef USE_FAST_OFFLOAD
    [[unroll]]
    for (int i=0;i<localStackSize;i++) { LOCAL_STACK[i] = -1; }
#endif

    // test constants
    vec3 
        torig = -divW(mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(origin, 1.0f))).xyz,
        torigTo = divW(mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(origin+direct, 1.0f))).xyz,
        dirproj = torigTo+torig;

    float dirlenInv = 1.f / max(length(dirproj), 1e-5f);
    dirproj *= dirlenInv; dirproj = 1.f / (max(abs(dirproj), 1e-6f.xxx) * mix(vec3(-1),vec3(1),greaterThanEqual(dirproj,vec3(0.f))));

    // limitation of distance
    BVEC3_ bsgn = (BVEC3_(sign(dirproj)*FTYPE_(1.0001f))+TRUE_)>>TRUE_;

    // bvh space precalculations 
    traverseState.bvhSpace.boxSide = bsgn;
    
    { // calculate longest axis
        vec3 drs = abs(direct); traverseState.geometrySpace.axis = 2;
        if (drs.y >= drs.x && drs.y > drs.z) traverseState.geometrySpace.axis = 1;
        if (drs.x >= drs.z && drs.x > drs.y) traverseState.geometrySpace.axis = 0;
        if (drs.z >= drs.y && drs.z > drs.x) traverseState.geometrySpace.axis = 2;
    }

    // calculate affine matrices
    vec4 vm = vec4(-direct, 1.f) / (traverseState.geometrySpace.axis == 0 ? direct.x : (traverseState.geometrySpace.axis == 1 ? direct.y : direct.z));
    traverseState.geometrySpace.iM = transpose(mat3(
        traverseState.geometrySpace.axis == 0 ? vm.wyz : vec3(1.f,0.f,0.f),
        traverseState.geometrySpace.axis == 1 ? vm.xwz : vec3(0.f,1.f,0.f),
        traverseState.geometrySpace.axis == 2 ? vm.xyw : vec3(0.f,0.f,1.f)
    ));
    traverseState.geometrySpace.lastIntersection = vec4(0.f.xx, INFINITY, FINT_NULL);

    // test intersection with main box
    float near = -INFINITY, far = INFINITY;
    const vec2 bndsf2 = vec2(-(1.f+1e-3f), (1.f+1e-3f));
    IF (not(intersectCubeF32Single(torig*dirproj, dirproj, bsgn, mat3x2(bndsf2, bndsf2, bndsf2), near, far))) {
        traverseState.idx = -1;
    }

    float toffset = max(near, 0.f);
    traverseState.bvhSpace.directInv = FVEC3_(dirproj);
    traverseState.bvhSpace.minusOrig = FVEC3_(fma(torig, dirproj, -toffset.xxx));//fma(FVEC3_(torig), FVEC3_(dirproj), -FVEC3_(toffset).xxx);
    traverseState.distMult = 1.f/precIssue(dirlenInv);
    traverseState.diffOffset = toffset;

    // begin of traverse BVH 
    const int max_iteraction = 8192;
    for (int hi=0;hi<max_iteraction;hi++) {
        IFALL (traverseState.idx < 0) break; // if traverse can't live

        if (traverseState.idx >= 0) { for (;hi<max_iteraction;hi++) {
            bool _continue = false;
            ivec2 b2idx = bvhLinear2D(traverseState.idx);
            ivec2 cnode = traverseState.idx >= 0 ? texelFetch(bvhStorage, b2idx, 0).xy : (-1).xx;
            // planned another plan of "y" value in BVH 

            // if not leaf 
            if (cnode.x != cnode.y) {
                vec2 nears = INFINITY.xx, fars = INFINITY.xx; 

                // intersect boxes
                BVEC2_ childIntersect = BVEC2_((traverseState.idx >= 0).xx);
                childIntersect &= BOOL_(cnode.x != cnode.y).xx; // base on fact 

                // load 32-byte bounding box
                const int _cmp = cnode.x >> 1;
                childIntersect &= intersectCubeDual(traverseState.bvhSpace.minusOrig, traverseState.bvhSpace.directInv, traverseState.bvhSpace.boxSide, 
#ifdef USE_F32_BVH
                    FMAT3X4_(bvhBoxes[_cmp][0], bvhBoxes[_cmp][1], bvhBoxes[_cmp][2]),
                    FMAT3X4_(vec4(0.f), vec4(0.f), vec4(0.f))
#else
                    FMAT3X4_(UNPACK_HF(bvhBoxes[_cmp][0].xy), UNPACK_HF(bvhBoxes[_cmp][1].xy), UNPACK_HF(bvhBoxes[_cmp][2].xy)),
                    FMAT3X4_(vec4(0.f), vec4(0.f), vec4(0.f))
#endif
                , nears, fars);
                childIntersect &= BVEC2_(lessThanEqual(nears+traverseState.diffOffset.xx, traverseState.bvhSpace.cutOut.xx));

                int fmask = (childIntersect.x + childIntersect.y*2)-1; // mask of intersection

                [[flatten]]
                if (fmask >= 0) {
                    _continue = true;

                    [[flatten]]
                    if (fmask == 2) { // if both has intersection
                        ivec2 ordered = cnode.xx + (SSC(lessEqualF(nears.x, nears.y)) ? ivec2(0,1) : ivec2(1,0));
                        traverseState.idx = ordered.x;
#ifdef USE_STACKLESS_BVH
                        IF (all(childIntersect)) traverseState.bitStack |= 1ul;
#else
                        IF (all(childIntersect) & BOOL_(!stackIsFull())) storeStack(ordered.y);
#endif
                    } else {
                        traverseState.idx = cnode.x + fmask;
                    }
                }

            } else  
            
            // if leaf, defer for intersection 
            if (cnode.x == cnode.y) {
                if (traverseState.defTriangleID < 0) {
                    traverseState.defTriangleID = texelFetch(bvhStorage, b2idx, 0).w;
                }
            }

#ifdef USE_STACKLESS_BVH
            // stackless 
            if (!_continue) {
                // go to parents so far as possible 
                for (int bi=0;bi<64;bi++) {
                    if ((traverseState.bitStack&1ul)!=0ul || traverseState.bitStack==0ul) break;
                    traverseState.bitStack >>= 1;
                    traverseState.idx = traverseState.idx >= 0 ? texelFetch(bvhStorage, bvhLinear2D(traverseState.idx), 0).z : -1;
                }

                // goto to sibling or break travers
                if (traverseState.bitStack!=0ul && traverseState.idx >= 0) {
                    traverseState.idx += traverseState.idx%2==0?1:-1; traverseState.bitStack &= ~1ul;
                } else {
                    traverseState.idx = -1;
                }

            } _continue = false;
#else
            // stacked 
            if (!_continue) {
                if (!stackIsEmpty()) {
                    traverseState.idx = loadStack();
                } else {
                    traverseState.idx = -1;
                }
            } _continue = false;
#endif

            IFANY (traverseState.defTriangleID >= 0 || traverseState.idx < 0 ) { SB_BARRIER break; }
        }}

        IFANY (traverseState.defTriangleID >= 0) { SB_BARRIER doIntersection(); }
    }

    // if has any intersection, include to result list
    SB_BARRIER
    IF (lessF(traverseState.geometrySpace.lastIntersection.z, INFINITY-0.001f) & BOOL_(traverseState.geometrySpace.lastIntersection.w != FINT_NULL)) {
        includeChain(traverseState.geometrySpace.lastIntersection);
    }
}




LOCAL_SIZE_LAYOUT;

void main() {
    //int wsize = arcounter.tT;
    #define wsize arcounter.tT
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 1000000);
    rayID = (int(gl_WorkGroupID.x) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x));

    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        int it = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x); //rayID = it;
        BOOL_ overflow = BOOL_(it >= wsize);
        IFALL(overflow) break;
        currentRayTmp = unorderedRays[it];

        // do BVH traversing 
        doBvhTraverse(currentRayTmp.origin.xyz, dcts(currentRayTmp.cdirect.xy), not(overflow));

        // save result if present (planned binding lately)
        IF (lessF(traverseState.geometrySpace.lastIntersection.z, INFINITY-0.001f) & BOOL_(traverseState.geometrySpace.lastIntersection.w != FINT_NULL)) {
            accquireUnordered(int(currentRayTmp.uindex.x)-1);
            currentRay.origin.w = currentRayTmp.origin.w;
            storeRay();
        }
        
        unorderedRays[it] = currentRayTmp;
    }
}
