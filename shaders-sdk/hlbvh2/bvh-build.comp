#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

int cdelta( in int a, in int b ){
    uint64_t acode = Mortoncodes[a], bcode = Mortoncodes[b];
    int pfx = nlz(acode^bcode);
    return pfx + (pfx < 64 ? 0 : nlz(a^b));
}

int findSplit( in int first, in int last) {
    int commonPrefix = cdelta(first, last), split = first, nstep = last - first;
    IFANY (commonPrefix < 64) {
        for (int i=0;(i<8192 && nstep>1);i++) {
            nstep = (nstep + 1) >> 1;
            int newSplit = split + nstep, code = cdelta(first, newSplit);
            split = code > commonPrefix ? newSplit : split;
        }
    } else {
        split = (split+last)>>1;
    }
    return clamp(split, first, last);
}

initAtomicSubgroupIncFunction(lCounter, lCounterInc, 2, int)
initAtomicSubgroupIncFunction(aCounter, aCounterInc, 1, int)
initAtomicSubgroupIncFunction(cCounter, cCounterInc, 1, int)
initAtomicSubgroupIncFunction(cCounter, cCounterDualInc, 2, int)

void splitNode(in int trID) {
    int prID = Actives[trID]|(int(Local_Idx)&1); // select element, include sibling
    ivec4 _pdata = bvhMeta[prID];

    if (_pdata.y > _pdata.x && _pdata.w == -1 && prID >= 0 && _pdata.x >= 0) { // when not leafs
        // fill empty boxes (pre-work)
        bvhBoxesWork[prID][0] =  100000.f.xxxx;
        bvhBoxesWork[prID][1] = -100000.f.xxxx;
        bvhBoxesWork[prID][2] =  100000.f.xxxx;
        bvhBoxesWork[prID][3] = -100000.f.xxxx;
        Flags[prID] = 0;

        // find split
        int split = findSplit(_pdata.x, _pdata.y);
        int hid = lCounterInc();
        
        // encode with SIMD-like
        ivec4 transplit = ivec4(_pdata.x, split+0, split+1, _pdata.y);
        bvec2 isLeaf = lessThan(transplit.yw - transplit.xz, ivec2(1));
        ivec2 hd = hid + ivec2(0, 1);

        // if any can continue splitting
        if (any(not(isLeaf))) { Actives[aCounterInc()] = hd.x; }

        if (all(isLeaf)) {
            int cl = cCounterDualInc(); 
            LeafIndices[cl+0] = hd.x+0, 
            LeafIndices[cl+1] = hd.x+1;
        }

        // link parent with childs
        bvhMeta[prID] = ivec4(hd.x, 2, _pdata.z, 0); // set as branching

        // make children nodes (with unknown identifier)
        bvhMeta[hd.x] = ivec4(transplit.xy, prID, -1);
        bvhMeta[hd.y] = ivec4(transplit.zw, prID, -1);
    } else 
    if (_pdata.y == _pdata.x && _pdata.w == -1 && prID >= 0 && _pdata.x >= 0) {
        LeafIndices[cCounterInc()] = prID;
    }
}

void main() {
    uint threadID = uint(gl_LocalInvocationID.x);
    int workID = int(gl_WorkGroupID.x);
    int WS = int(gl_WorkGroupSize.x);

    // create initial (root) node
    bool isBeginning = aRange[1] == 0;
    if (gl_GlobalInvocationID.x == 0 && isBeginning) {
        int hid = lCounterInc(); Actives[aCounterInc()] = hid;
        bvhMeta[hid+0] = ivec4(0, aabbcount[0]-1, -1, -1);
        bvhMeta[hid+1] = ivec4(-1, -1, -1, 1);
    }

    LGROUP_BARRIER

    // begin work on splitting
    ivec2 ranged = (isBeginning && workID == 0) ? ivec2(0, 1) : ivec2(aRange[0], aRange[1]);
    uint workSize = min(tiled(ranged.y-ranged.x, tiled(WS,2)), 65536u);
    int wgs = int(gl_NumWorkGroups);
    for (int i=0;i<workSize;i+=wgs) {
        int trID = ranged.x + ((WS * (i+workID) + int(threadID))>>1);
        IFALL (trID >= ranged.y) break; 
        if (trID < ranged.y) splitNode(trID);
    }
}
