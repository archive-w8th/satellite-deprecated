#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

// current work group size
#define WG_COUNT 32

// shared memory of...
shared uint localHistogram[RADICES];
layout (local_size_x = RADICES) in;

// reductive prefix scan of work groups
uint prefixScan(const uint limit) {
    UVEC_WARP ldx = LT_IDX;
    GROUP_BARRIER
    {
        uint prv = ldx >= 1 ? ldx-1 : 0;
        uint tmp = ldx >= 1 && ldx < limit ? localHistogram[prv] : 0;
        GROUP_BARRIER
        if (ldx < limit) localHistogram[ldx] = tmp;
        GROUP_BARRIER
    }

    // reduction prefix-scan
    for (int i=1;i<limit;i<<=1) {
        uint prv = ldx >= i ? ldx-i : 0;
        uint off = ldx >= i && ldx < limit ? localHistogram[prv] : 0, 
             hst =             ldx < limit ? localHistogram[ldx] : 0;
        GROUP_BARRIER
        if (ldx < limit) localHistogram[ldx] = off + hst;
        GROUP_BARRIER
    }

    uint res = localHistogram[ldx];
    GROUP_BARRIER
    return res;
}

void main() {
    LT_IDX = gl_LocalInvocationID.x;
    LC_IDX = gl_LocalInvocationID.x / WARP_SIZE_RT;
    LANE_IDX = (gl_LocalInvocationID.x % WARP_SIZE_RT);

    IFALL (gl_WorkGroupID.y < 1) {
        
        // calculate prefix-sums of all work groups
        localHistogram[LT_IDX] = 0;
        GROUP_BARRIER

        // calculate local prefix-sum in each work of each radice
        uint awHistogram = 0; // sum of work-group histograms (globalized histograms)
        for (uint wk=0;wk<WG_COUNT;wk++) {
            uint widx = LT_IDX + RADICES * wk;
            if (LT_IDX < RADICES) PrefixSum[widx] = add(awHistogram, Histogram[widx]);
        }

        // calculate prefix-sum of all work-groups for each radice
        if (LT_IDX < RADICES) localHistogram[LT_IDX] = awHistogram;
        uint rdcAwPrefixOffset = prefixScan(RADICES);
        
        // add work-group prefix-sum of radice to in-group prefix-sum
        for (uint wk=0;wk<WG_COUNT;wk++) {
            if (LT_IDX < RADICES) PrefixSum[LT_IDX + RADICES * wk] += rdcAwPrefixOffset;
        }
    }
}
