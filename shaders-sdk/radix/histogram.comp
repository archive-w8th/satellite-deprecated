#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

//layout (local_size_x = WARP_SIZE, local_size_y = WRK_SIZE) in;
layout (local_size_x = BLOCK_SIZE) in;

shared uint localHistogram[RADICES];

// shared for 16 threads (with lanes)
shared URDC_WARP _data[WARP_SIZE];
#define key _data[LANE_IDX]

initNonAtomicIncFunctionTarget(localHistogram[WHERE], countHistogram, uint)

void main() {
    LT_IDX = gl_LocalInvocationID.x;
    LF_IDX = gl_LocalInvocationID.x / WARP_SIZE_RT;
    LC_IDX = gl_WorkGroupID.y + LF_IDX * gl_WorkGroupSize.y;
    LANE_IDX = (gl_LocalInvocationID.x % WARP_SIZE_RT);
    uint WSZ = WARP_SIZE_RT;
    
    IFANY (gl_WorkGroupID.y < AFFINITION) {

        // calculate blocks
        blocks_info blocks = get_blocks_info(NumKeys);
        uint bcount = min(blocks.count, 16384);
        
        // barrier-less, WARP-optimized histogram calculation
        for (uint rk=0;rk<RADICES;rk+=WRK_SIZE_RT) {
            WPTR addr = WPTR(blocks.offset) + WPTR(LANE_IDX);
            URDC_WARP radice = URDC_WARP(rk + LC_IDX);
            if (radice >= RADICES) break;

            // clear histogram of block
            localHistogram[radice] = 0;

            // use SIMD lanes for calculate histograms
            for ( uint wk = 0; wk < bcount; wk++ ) {
                BVEC_WARP validAddress = addr < NumKeys && gl_WorkGroupID.y < AFFINITION;
                IFALL(!validAddress) break;

                memoryBarrier(); barrier();
                if (LF_IDX == 0) {
                    key = URDC_WARP(BFE(validAddress ? KeyTmp[addr] : KEYTYPE(0xFFFFFFFFFFFFFFFFul), Shift*BITS_PER_PASS, BITS_PER_PASS));
                }
                memoryBarrier(); barrier();

                if (key == radice && validAddress) {
                    countHistogram(radice, TRUE_);
                }
                
                addr += WARP_SIZE_RT;
            }

            // planned WARP-based copy
            PrefixSum[radice + RADICES * gl_WorkGroupID.x] = localHistogram[radice];
            Histogram[radice + RADICES * gl_WorkGroupID.x] = localHistogram[radice];
        }

    }
}
