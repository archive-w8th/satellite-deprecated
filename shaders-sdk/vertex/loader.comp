#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define VERTEX_FILLING

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/vertex.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

LOCAL_SIZE_LAYOUT;



struct MeshUniformStruct {
    int vertexAccessor;
    int normalAccessor;
    int texcoordAccessor;
    int modifierAccessor;
    int materialAccessor;
    int indiceAccessor;
    int r0, r1;

    mat4 transform;
    mat4 transformInv;

    int materialID;
    int int16bit;
    int nodeCount;
    int primitiveType;
};

// subdata structuring in buffer region
struct VirtualBufferView {
    int byteOffset;
    int byteStride;
    int bufferID;
};

// structuring swizzle
struct VirtualDataAccess {
    int bufferView; // buffer-view structure
    int byteOffset; // in structure offset
    uint bitfield;
};

// structure accessors 
struct VirtualBufferBinding {
    int bufferID; // buffer region PTR, override
    int dataAccess; // structure accessor
    int indexOffset; // structure index offset (where should be counting), so offset calculates as   (bv.byteOffset + indexOffset*bv.byteStride + ac.byteOffset)
};



const ivec2 COMPONENTS = ivec2(0, 2);
const ivec2 ATYPE = ivec2(2, 4);
const ivec2 NORMALIZED = ivec2(6, 1);

int aComponents(in VirtualDataAccess vac) {
    return parameteri(COMPONENTS, vac.bitfield);
}

int aType(in VirtualDataAccess vac) {
    return parameteri(ATYPE, vac.bitfield);
}

int aNormalized(in VirtualDataAccess vac) {
    return parameteri(NORMALIZED, vac.bitfield);
}



// input data
layout ( std430, binding = 0, set = 0 ) restrict buffer BuildCounters { int tcounter[1]; };
layout ( std430, binding = 1, set = 0 ) readonly buffer BufferSpace {INDEX16 bufferSpace[]; };
layout ( std430, binding = 2, set = 0 ) readonly buffer BufferRegions {uvec2 bufferRegions[]; };
layout ( std430, binding = 3, set = 0 ) readonly buffer IBufferViews {VirtualBufferView bufferViews[]; };
layout ( std430, binding = 4, set = 0 ) readonly buffer DataFormat {VirtualDataAccess dataFormats[]; };
layout ( std430, binding = 5, set = 0 ) readonly buffer AccessBinding {VirtualBufferBinding dataBindings[]; };
layout ( std430, binding = 6, set = 0 ) readonly buffer IMeshUniform {MeshUniformStruct meshUniform; };



uint calculateByteOffset(in int binding, in uint index, in uint bytecorrect){
    int bufferID = dataBindings[binding].bufferID, 
        dataAccess = dataBindings[binding].dataAccess, 
        bufferView = dataFormats[dataAccess].bufferView;

    // if no direct buffer binding, pick from buffer view
    if (bufferID < 0) bufferID = bufferViews[bufferView].bufferID;

    // based on regions byte offset
    uint offseT = bufferRegions[bufferID].x;

    // calculate byte offset 
    offseT += bufferViews[bufferView].byteOffset + dataFormats[dataAccess].byteOffset;

    // get true stride 
    uint stride = max(bufferViews[bufferView].byteStride, (aComponents(dataFormats[dataAccess])+1) << bytecorrect);

    // calculate structure indexed offset
    offseT += (dataBindings[binding].indexOffset + index) * stride;

    // 
    return offseT >> bytecorrect;
}


void readByAccessor(in int binding, in uint index, inout vec4 outp) {
    if (binding >= 0) {
        uint T = calculateByteOffset(binding, index, 2);
        uint C = aComponents(dataFormats[dataBindings[binding].dataAccess])+1;
        if (C >= 1) outp.x = uintBitsToFloat(M32(bufferSpace,T+0));
        if (C >= 2) outp.y = uintBitsToFloat(M32(bufferSpace,T+1));
        if (C >= 3) outp.z = uintBitsToFloat(M32(bufferSpace,T+2));
        if (C >= 4) outp.w = uintBitsToFloat(M32(bufferSpace,T+3));
    }
}

void readByAccessor(in int binding, in uint index, inout vec3 outp) {
    if (binding >= 0) {
        uint T = calculateByteOffset(binding, index, 2);
        uint C = aComponents(dataFormats[dataBindings[binding].dataAccess])+1;
        if (C >= 1) outp.x = uintBitsToFloat(M32(bufferSpace,T+0));
        if (C >= 2) outp.y = uintBitsToFloat(M32(bufferSpace,T+1));
        if (C >= 3) outp.z = uintBitsToFloat(M32(bufferSpace,T+2));
    }
}

void readByAccessor(in int binding, in uint index, inout vec2 outp) {
    if (binding >= 0) {
        uint T = calculateByteOffset(binding, index, 2);
        uint C = aComponents(dataFormats[dataBindings[binding].dataAccess])+1;
        if (C >= 1) outp.x = uintBitsToFloat(M32(bufferSpace,T+0));
        if (C >= 2) outp.y = uintBitsToFloat(M32(bufferSpace,T+1));
    }
}

void readByAccessor(in int binding, in uint index, inout float outp) {
    if (binding >= 0) {
        uint T = calculateByteOffset(binding, index, 2);
        outp = uintBitsToFloat(M32(bufferSpace,T+0));
    }
}

void readByAccessor(in int binding, in uint index, inout int outp) {
    if (binding >= 0) {
        uint T = calculateByteOffset(binding, index, 2);
        outp = int(M32(bufferSpace,T+0));
    }
}

// planned read type directly from accessor
void readByAccessorIndice(in int binding, in uint index, inout uint outp) {
    if (binding >= 0) {
        const bool U16 = meshUniform.int16bit > 0;
        uint T = calculateByteOffset(binding, index, U16 ? 1 : 2);
        if (U16) { outp = M16(bufferSpace,T+0); } else { outp = M32(bufferSpace,T+0); }
    }
}

const int m[3] = {3, 0, 2}, ms[3] = {2, 1, 3};
initAtomicSubgroupIncFunctionDyn(tcounter[0], tcounterInc, int)

void main(){
    int n = meshUniform.nodeCount;
    int wcount = min(tiled(n, int(gl_WorkGroupSize.x)), 50000);
    int wgs = int(gl_NumWorkGroups);
    
    for (int w=0;w<wcount;w+=wgs) {
        uint globalID = (w + uint(gl_WorkGroupID.x)) * uint(gl_WorkGroupSize.x) + uint(gl_LocalInvocationID.x); if (globalID >= n) break;
        if (globalID < n && globalID >= 0) {

            // constant material ID from vertex instance 
            int matID = int(meshUniform.materialID);

            // read material per vertex if possible 
            readByAccessor(meshUniform.materialAccessor, globalID, matID);

            // default values
            vec4 vertice[4] = {vec4(0.0f), vec4(0.0f), vec4(0.0f), vec4(0.0f)};
            vec3 normal[4] = {vec3(0.0f), vec3(0.0f), vec3(0.0f), vec3(0.0f)};
            vec4 texcoord[4] = {vec4(0.0f), vec4(0.0f), vec4(0.0f), vec4(0.0f)};
            vec4 colors[4] = {vec4(0.0f), vec4(0.0f), vec4(0.0f), vec4(0.0f)};
            vec4 mods[4] = {vec4(0.0f), vec4(0.0f), vec4(0.0f), vec4(0.0f)};


            const int mode = meshUniform.primitiveType, trp = mode == 1 ? 4 : 3;
            for (int i=0;i<trp;i++) {
                uint indiceID = globalID * trp + i;
                readByAccessorIndice(meshUniform.indiceAccessor, indiceID, indiceID);

                { // vertex accessor are required
                    readByAccessor(meshUniform.vertexAccessor, indiceID, vertice[i]);
                }
                if (meshUniform.normalAccessor != -1) {
                    readByAccessor(meshUniform.normalAccessor, indiceID, normal[i].xyz);
                }
                if (meshUniform.modifierAccessor != -1) {
                    readByAccessor(meshUniform.modifierAccessor, indiceID, mods[i]);
                }
                if (meshUniform.texcoordAccessor != -1) {
                    readByAccessor(meshUniform.texcoordAccessor, indiceID, texcoord[i].xy);
                }

                vertice[i] = divW(mult4(meshUniform.transform, vec4(vertice[i].xyz,1.f)));
                normal[i] = mult4(meshUniform.transformInv, vec4(normal[i].xyz, 0.0f)).xyz;
            }

            // adapt quads to triangles
            //const ivec2 isize = ivec2(imageSize(vertex_texture_out)); 
            const int istride = mode == 1 ? 2 : 1;
            int ordr = int(globalID*istride), tidc = tcounterInc(istride);
            vec3 offsetnormal = normalize(cross(vertice[1].xyz - vertice[0].xyz, vertice[2].xyz - vertice[0].xyz));

            {
                vorders[tidc] = ordr;
                materials[tidc] = matID;
                
                ivec2 NORMAL_TXF = gatherMosaic(getUniformCoord(tidc*ATTRIB_EXTENT+NORMAL_TID));
                ivec2 TEXCOORD_TXF = gatherMosaic(getUniformCoord(tidc*ATTRIB_EXTENT+TEXCOORD_TID));

                for (int i=0;i<3;i++) {
                    const int mi = i;

                    vec3 nrml = offsetnormal.xyz;
                    if (mlength(abs(normal[mi])) >= 0.0001f && meshUniform.normalAccessor != -1) nrml = normal[mi];
                    
                    ISTORE(attrib_texture_out, mosaicIdc(NORMAL_TXF, i), vec4(normalize(nrml), 0.0f));
                    ISTORE(attrib_texture_out, mosaicIdc(TEXCOORD_TXF, i), vec4(texcoord[mi]));

                    // interleave vertex for intersection
                    //lvtx[tidc*9+3*0+i] = vertice[mi].x;
                    //lvtx[tidc*9+3*1+i] = vertice[mi].y;
                    //lvtx[tidc*9+3*2+i] = vertice[mi].z;
                    lvtx[tidc*9+3*i+0] = vertice[mi].x;
                    lvtx[tidc*9+3*i+1] = vertice[mi].y;
                    lvtx[tidc*9+3*i+2] = vertice[mi].z;
                }
            }

            if (mode == 1) {
                tidc += 1;
                vorders[tidc] = ordr;
                materials[tidc] = matID;

                ivec2 NORMAL_TXF = gatherMosaic(getUniformCoord(tidc*ATTRIB_EXTENT+NORMAL_TID));
                ivec2 TEXCOORD_TXF = gatherMosaic(getUniformCoord(tidc*ATTRIB_EXTENT+TEXCOORD_TID));

                for (int i=0;i<3;i++) {
                    const int mi = m[i];

                    vec3 nrml = offsetnormal.xyz;
                    if (mlength(abs(normal[mi])) >= 0.0001f && meshUniform.normalAccessor != -1) nrml = normal[mi];
                    
                    ISTORE(attrib_texture_out, mosaicIdc(NORMAL_TXF, i), vec4(normalize(nrml), 0.0f));
                    ISTORE(attrib_texture_out, mosaicIdc(TEXCOORD_TXF, i), vec4(texcoord[mi]));

                    // interleave vertex for intersection
                    //lvtx[tidc*9+3*0+i] = vertice[mi].x;
                    //lvtx[tidc*9+3*1+i] = vertice[mi].y;
                    //lvtx[tidc*9+3*2+i] = vertice[mi].z;
                    lvtx[tidc*9+3*i+0] = vertice[mi].x;
                    lvtx[tidc*9+3*i+1] = vertice[mi].y;
                    lvtx[tidc*9+3*i+2] = vertice[mi].z;
                }
            }

        }
    }
}
