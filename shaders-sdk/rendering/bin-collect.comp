#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"

LOCAL_SIZE_LAYOUT;

void main() {
    #define wsize RAY_BLOCK samplerUniform.blockBinCount
    //int wsize = RAY_BLOCK samplerUniform.blockBinCount;
    int wcsize = int(gl_WorkGroupSize.x) / int(WARP_SIZE_RT);
    int wcount = min(tiled(wsize, wcsize), 50000);

    // invoke available blocks
    bool overflow = false;
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * wcsize + int(LC_IDX);

        // check if not reached blocks limit
        overflow = overflow || anyInvoc(overflow || anyInvoc(globalID >= wsize));
        IFALL(overflow) break;
        if (!overflow) {
            int idx = readLane(blockBins[globalID].info.header   , 0)-1; if (LANE_IDX == 0) blockBins[globalID].info.header   = -1;
            int cnt = readLane(blockBins[globalID].info.count    , 0)-0; if (LANE_IDX == 0) blockBins[globalID].info.count    =  0;
            int prv = readLane(blockBins[globalID].info.previous , 0)-1; if (LANE_IDX == 0) blockBins[globalID].info.previous = -1;
            if (LANE_IDX == 0 && prv >= 0) rayBlocks[prv].info.next = -1; // unlink weird block

            // scatter colors from block bins
            bool inv = overflow;
            int cnm = min(256, cnt);
            for (int m=0;m<cnm;m++) {
                inv = inv || anyInvoc(inv || anyInvoc(inv || idx < 0));
                IFALL(inv) break; // if overflow or bad texel
                if (!inv) {
                    for (int tb = 0; tb < R_BLOCK_SIZE; tb += WARP_SIZE_RT) {
                        int nid = tb + int(LANE_IDX);
                        IFALL(nid >= R_BLOCK_SIZE) break;
                        if (nid < R_BLOCK_SIZE) {
                            int texel = blockBins[globalID].texels[nid]-1;
                            vec4 color = f16_f32(rayBlockNodes[idx][nid].data.dcolor);
                            WriteColor(rayBlockNodes[idx][nid].data.dcolor, 0.f.xxxx);
                            if (texel >= 0) texelBuf.nodes[texel].color.xyz += color.xyz;
                        }
                    }
                    int preidx = readLane(idx >= 0 ? rayBlocks[idx].info.next : -1, 0); 
                    if (LANE_IDX == 0 && idx >= 0) rayBlocks[idx].info.next = -1;
                    idx = preidx-1;
                }
            }
            if (LANE_IDX == 0 && idx >= 0) rayBlocks[idx].info.next = -1;
        }
    }
}
