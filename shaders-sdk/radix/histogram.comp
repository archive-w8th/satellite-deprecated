#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;

shared uint localHistogram[RADICES];

// shared for 16 threads (with lanes)
shared URDC_WARP _data[128];
#define key _data[LANE_IDX]

initSubgroupIncFunctionTarget(localHistogram[WHERE], countHistogram, 1, uint)

void main() {
    LT_IDX = gl_LocalInvocationID.x;
    LF_IDX = gl_LocalInvocationID.x / WARP_SIZE_RT;
    LC_IDX = gl_WorkGroupID.y + LF_IDX * gl_WorkGroupSize.y;
    LANE_IDX = (gl_LocalInvocationID.x % WARP_SIZE_RT);

    // clear histogram of block (planned distribute threads)
    [[unroll]]
    for (uint rk=0;rk<RADICES;rk+=WRK_SIZE_RT) {
        localHistogram[rk + LC_IDX] = 0;
    }
    GROUP_BARRIER

    // use SIMD lanes for calculate histograms
    blocks_info blocks = get_blocks_info(NumKeys);
    uint bcount = min(blocks.count, 65536);
    WPTR addr = WPTR(blocks.offset) + WPTR(LANE_IDX);
    for ( uint wk = 0; wk < bcount; wk++ ) {
        BVEC_WARP validAddress = addr < blocks.limit;
        IFALL(!validAddress) break;

        if (LF_IDX == 0) {
            key = URDC_WARP(BFE(validAddress ? KeyTmp[addr] : KEYTYPE(0xFFFFFFFFu.xx), Shift*BITS_PER_PASS, BITS_PER_PASS));
        }
        GROUP_BARRIER

        // WARP-optimized histogram calculation
        for (uint rk=0;rk<RADICES;rk+=WRK_SIZE_RT) {
            UVEC_WARP radice = UVEC_WARP(rk + LC_IDX);
            bool owned = key == radice && validAddress;
            if (owned) countHistogram(radice);
            IFALL (radice >= RADICES || owned || !validAddress) break;
        }

        addr += WARP_SIZE_RT;
    }

    // resolve histograms (planned distribute threads) 
    GROUP_BARRIER

    [[unroll]]
    for (uint rk=0;rk<RADICES;rk+=WRK_SIZE_RT) {
        UVEC_WARP radice = UVEC_WARP(rk + LC_IDX);
        if (radice < RADICES) {
            PrefixSum[radice + RADICES * gl_WorkGroupID.x] = localHistogram[radice];
            Histogram[radice + RADICES * gl_WorkGroupID.x] = localHistogram[radice];
        }
    }
}
