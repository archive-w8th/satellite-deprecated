#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;


int findSplit( in int first, in int last) {
    MORTONTYPE firstCode = Mortoncodes[first], lastCode = Mortoncodes[last];
    int commonPrefix = nlz(firstCode ^ lastCode), split = commonPrefix == 0 ? ((first + last) >> 1) : first, nstep = last - first;
    for (int i=0;(i<8192 && nstep>1 && commonPrefix != 0);i++) {
        nstep = (nstep + 1) >> 1;
        int newSplit = split + nstep;
        int code = nlz(firstCode ^ Mortoncodes[newSplit]);
        if (code < 0) code = 64 + nlz(first^newSplit); // fast calculation code
        split = newSplit < last && code > commonPrefix ? newSplit : split;
    }
    return clamp(split, first, last-1);
}

initAtomicIncByFunction(lCounter, lCounterInc, int)
initAtomicIncFunction(aCounter, aCounterInc, int)
initAtomicIncFunction(cCounter, cCounterInc, int)

void splitNode(in int trID) {
    int prID = exchange(Actives[trID], -1);

    //HlbvhNode parentNode = Nodes[prID];
    ivec2 _hidx = bvhLinear2D(prID);
    ivec4 _pdata = imageLoad(bvhStorage, _hidx);
    if (_pdata.x != _pdata.y && prID != -1) {
        // find split
        int split = findSplit(_pdata.x, _pdata.y);
        int hid = lCounterInc(TRUE_, 2);
        
        // encode with SIMD-like
        ivec4 transplit = ivec4(_pdata.x, split+0, split+1, _pdata.y);
        bvec2 isLeaf = lessThan(transplit.yw - transplit.xz, ivec2(1));
        ivec2 hd = hid + ivec2(0, 1);

        // left child
        if (isLeaf.x) {
            exchange(LeafIndices[cCounterInc(TRUE_)], hd.x);
        } else { // add to next works
            exchange(Actives[aCounterInc(TRUE_)], hd.x);
        }

        // right child
        if (isLeaf.y) {
            exchange(LeafIndices[cCounterInc(TRUE_)], hd.y);
        } else { // add to next works
            exchange(Actives[aCounterInc(TRUE_)], hd.y);
        }

        ivec2 _lidx = bvhLinear2D(hd.x), _ridx = bvhLinear2D(hd.y);
        Flags[hd.x] = 0, Flags[hd.y] = 0;
        imageStore(bvhStorage, _lidx, ivec4(transplit.xy, prID, -1));
        imageStore(bvhStorage, _ridx, ivec4(transplit.zw, prID, -1));
        imageStore(bvhStorage, _hidx, ivec4(hd.xy, _pdata.zw)); // link parent with childs
    }
}

void main() {
    uint threadID = uint(gl_LocalInvocationID.x);
    int workID = int(gl_WorkGroupID.x);
    int WS = int(gl_WorkGroupSize.x);
    int hWS = int(gl_WorkGroupSize.x) / 2;

    // create initial (root) node
    bool isBeginning = aRange[1] == 0;
    if (gl_GlobalInvocationID.x == 0 && isBeginning) {
        int hid = lCounterInc(TRUE_, 2);
        exchange(Actives[aCounterInc(TRUE_)], hid);

        imageStore(bvhStorage, bvhLinear2D(hid), ivec4(0, aabbcount[0]-1, -1, -1));
        Flags[hid] = 0;
    }

    memoryBarrier(); barrier(); 

    // begin work on splitting
    int ranged[2] = (isBeginning && workID == 0) ? int[2](0, 1) : int[2](aRange[0], aRange[1]);
    uint workSize = min((ranged[1] <= ranged[0]) ? 0 : (((ranged[1] - ranged[0]) - 1) / WS + 1), 8192);
    int wgs = int(gl_NumWorkGroups);
    for (int i=0;i<workSize;i+=wgs) {
        int trID = ranged[0] + WS * (i+workID) + int(threadID);
        if (trID >= ranged[1]) break;
        if (trID < ranged[1]) splitNode(trID);
    }
}
