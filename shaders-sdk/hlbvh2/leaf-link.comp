#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_PACKED_LOADER
#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

void main() {
    int wsize = cCounter;
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 131072);
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(Local_Idx);
        IFALL(globalID >= wsize) break;
        if (globalID < wsize && globalID >= 0) {
            int idx = LeafIndices[globalID]-1;
            if (idx >= 0) {
                ivec4 bvhmeta = bvhMeta[idx];
                if (bvhmeta.y == 1 && bvhmeta.x == -1 && bvhmeta.w >= 0) { // if true leaf
                    uint leafID = MortoncodesIndices[bvhmeta.w];
                    bvhMeta[idx] = ivec4(Leafs[leafID].pdata.w, 1, bvhmeta.zw);

                    // make box of leaf block
                    int bidx = idx>>1, sidx = idx&1;
                    bvhBoxesWork[bidx][sidx*2+0] = Leafs[leafID].lbox[0];
                    bvhBoxesWork[bidx][sidx*2+1] = Leafs[leafID].lbox[1];
                }
            }
        }
    }
}
