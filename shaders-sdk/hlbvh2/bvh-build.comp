#version 460 core
#extension GL_GOOGLE_include_directive : enable

#ifdef NVIDIA_PLATFORM
#define WORK_SIZE_BND 512
#else 
#define WORK_SIZE_BND 1024
#endif

#define BVH_BUILD
#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

int cdelta( in int a, in int b ){
#ifdef INTEL_PLATFORM
    uvec2 acode = Mortoncodes[a], bcode = Mortoncodes[b];
    acode.x = a, bcode.x = b;
    return nlz(acode^bcode);
#else 
    uvec2 acode = Mortoncodes[a], bcode = Mortoncodes[b];
    int pfx = nlz(acode^bcode);
    return pfx + (pfx < 64 ? 0 : nlz(a^b));
#endif
}


int findSplit( in int first, in int last) {
    int commonPrefix = cdelta(first, last), split = first, nstep = last - first;
    if (nstep <= 0) { split = first; } else // if first == last
    if (commonPrefix >= 64) { split = (first + last)>>1; } else // if morton code equals
    {for (int i=0;(i<8192 && nstep>1);i++) { // search split
        int newSplit = split + (nstep = (nstep + 1) >> 1), code = cdelta(first, newSplit);
        split = code > commonPrefix ? newSplit : split;
    }}
    return clamp(split, first, last);
}


// shared memory counters
shared int _counters[8];
#define cBuffer _counters[4]


// define function for increment
initAtomicSubgroupIncFunction(_counters[0], lCounterInc, 2, int)
initAtomicSubgroupIncFunction(_counters[1], aCounterInc, 1, int)
initAtomicSubgroupIncFunction(_counters[2], cCounterInc, 1, int)
initAtomicSubgroupIncFunction(_counters[2], cCounterDualInc, 2, int)


void splitNode(in int fID, in int side) {
    // select elements, include sibling
    int prID = fID + side; 
    ivec4 _pdata = bvhMeta[prID];

    // mark unbounded
    if (prID >= 0) {
        Flags[prID] = 0;
        bvhBoxesWork[fID][side*2+0] = vec4( 100000.f);
        bvhBoxesWork[fID][side*2+1] = vec4(-100000.f);
    }

    // make branch
    if (_pdata.y > _pdata.x && _pdata.x >= 0 && _pdata.y >= 0 && prID >= 0 && fID >= 0 ) { // when not leafs
    
        // find split
        int split = findSplit(_pdata.x, _pdata.y-1);
        ivec4 transplit = ivec4(_pdata.x, split+0, split+1, _pdata.y);
        bvec2 isLeaf = lessThan(transplit.yw - transplit.xz, ivec2(1,1));
        int hd = lCounterInc();
        
        // resolve branch
        bvhMeta[prID] = ivec4(hd.x, 2, _pdata.zw);
        bvhMeta[hd+0] = ivec4(transplit.xy, prID, prID+1);
        bvhMeta[hd+1] = ivec4(transplit.zw, prID, prID+1);
        Actives[aCounterInc()][cBuffer] = hd+1;
    } else

    // make leaf
    if (_pdata.y == _pdata.x && _pdata.x >= 0 && _pdata.y >= 0 && prID >= 0 && fID >= 0 && _pdata.z >= 0) { // if leaf
        LeafIndices[cCounterInc()] = prID+1;
    }
}


layout ( local_size_x = WORK_SIZE_BND ) in;

void main() {
    int threadID = int(Local_Idx);
    int groupSize = int(gl_WorkGroupSize.x);

    // lane-based
    int gS = tiled(groupSize, 2);
    int iT = threadID >> 1;
    int sD = threadID & 1;
    LGROUP_BARRIER

    if (threadID < 8) { _counters[threadID] = 0; }
    LGROUP_BARRIER

    // create initial (root) node
    if (threadID == 0) {
        int hid = lCounterInc();
        bvhMeta[hid+0] = ivec4(0, aabbcount-1, -1, 0);
        bvhMeta[hid+1] = ivec4(-1, -1, -1, 0);
        Actives[aCounterInc()][cBuffer] = hid+1;
    }
    LGROUP_BARRIER
    
    // building BVH
    for (int m=0;m<4096;m++) {
        // check activity counter
        const int asize = _counters[1];
        IFALL (asize <= 0) break;
        LGROUP_BARRIER

        // switch buffer and reset counter
        if (threadID == 0) { 
            _counters[1] = 0; const int swch = 1-cBuffer; exchange(cBuffer, swch); 
        } // ping pong
        LGROUP_BARRIER

        // split nodes
        const int wsize = tiled(asize, gS)*gS;
        for (int fT=0;fT<wsize;fT+=gS) {
            int uID = fT + iT; 
            
            // split prefixed elements
            IFALL (uID >= asize) break;

            // get spared prefix
            const int fID = readLane((Lane_Idx&1) == 0 ? exchange(Actives[uID][1-cBuffer], 0)-1 : -1, (Lane_Idx>>1)<<1);

            // split sibling nodes
            if (uID < asize) splitNode(fID, sD);
        }
        LGROUP_BARRIER
    }

    // copy to external counters
    if (threadID == 0) {
        lCounter = _counters[0];
        aCounter = _counters[1];
        cCounter = _counters[2];
    }
}
