#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define FLATTEN_BOX

#define SIMPLIFIED_RAY_MANAGMENT
//#define DISCARD_SHARED_CACHING // store rays in registers if possible
//#define STACKLESS_BVH

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/morton.glsl"
#include "../include/mathlib.glsl"
#include "../include/vertex.glsl"

// consts
const int STACK_SIZE = 16; // can be much smaller cache
const int EXT_STACK_SIZE = 16;
const int BAKED_STACK_SIZE = 1;
const int ESTIMATE_BATCH = WARP_SIZE;
const int STACK_SIZE_SM = EXT_STACK_SIZE + STACK_SIZE;

struct BlockCacheInfo {
    int indiceCount; // count of indices in traverse
    int triCount; // count of triangle pairs
    ivec2 padding0;
};

// as minimum 16kb + 16 byte per block
struct BlockCache {
    BlockCacheInfo info;
    ivec2 triangles[WARP_SIZE*2]; // ~16kb
};


struct NodeCacheInfo {
    int bakedStackCount;
    int chainID;
    int prevHt;
    int nextHt;
};

// as minimum 384 byte per node
struct NodeCache {
    NodeCacheInfo info;
    int indeferredStackExt[EXT_STACK_SIZE];
    vec4 bakedStack[BAKED_STACK_SIZE];
};


layout ( std430, binding = 18, set = 0 ) readonly buffer BVHBlock { UBLANEF_ bvhBoxes[][4]; };
layout ( std430, binding = 19, set = 0 ) restrict buffer TraverseNodes { NodeCache nodeCache[]; };
layout ( std430, binding = 20, set = 0 ) restrict buffer TraverseBlock { BlockCache blockCache[]; };


// pointer in global cache
int rayID = 0;

// watertight intersection
int axis = 2; mat3 M; 

// offload cache
FVEC3_ origined = FTYPE_(0.f).xxx, divident = FTYPE_(0.f).xxx;
BVEC3_ bsgn = FALSE_.xxx; BOOL_ validBox = FALSE_;
float dirlenInv = 1.f, toffset = 0.f, predist = INFINITY;
ivec2 esc = ivec2(-1, -1), lastesc = ivec2(-1, -1), deftri = ivec2(-1);
int idx = 0, bstackCount = 0, deferredPtr = 0;
bool mergeRestCmd = false, awaitFlag = false;
#define validBoxIn validBox



#ifndef STACKLESS_BVH
shared int indeferredStack[WORK_SIZE][STACK_SIZE];
#define deferredStackExt nodeCache[rayID].indeferredStackExt
#define deferredStack indeferredStack[LT_IDX]

int loadStack(in int STI) {
    int VALUE = int(-1);
    if (STI < STACK_SIZE && STI >= 0) { 
        VALUE = exchange(deferredStack[STI], -1);
    } else 
    if (STI < STACK_SIZE_SM && STI >= 0) {
        VALUE = exchange(deferredStackExt[STI - STACK_SIZE], -1);
    }
    return VALUE;
}

void storeStack(in int STI, in int VALUE) {
    if (STI < STACK_SIZE && STI >= 0) {
        deferredStack[STI] = VALUE;
    } else 
    if (STI < STACK_SIZE_SM && STI >= 0) {
        deferredStackExt[STI - STACK_SIZE] = VALUE;
    }
}
#endif


// some ideas been used from http://www.cs.utah.edu/~thiago/papers/robustBVH-v2.pdf
// 
void beginTraverse(inout vec3 origin, inout vec3 direct, in BOOL_ valid) {
    direct = normalize(direct);

    // test constants
    vec3 
        dirproj = mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(direct, 0.0f)).xyz, 
        torig = -mult4(GEOMETRY_BLOCK geometryUniform.transform, vec4(origin, 1.0f)).xyz;

    dirlenInv = 1.f / max(length(dirproj), 0.00001f), toffset = 0.f, dirproj *= dirlenInv;
    dirproj = 1.f / (max(abs(dirproj), vec3(0.0001f)) * mix(vec3(-1),vec3(1),greaterThanEqual(dirproj,vec3(0.f))));

    // limitation of distance
    predist = nodeCache[rayID].info.nextHt > 0 ? hits[nodeCache[rayID].info.nextHt-1].uvt.z : INFINITY;

    // test with root (unit) node
    BOOL_ vldbx = valid;
    IF (vldbx) {
        float near = INFINITY, far = INFINITY, 
        bdist = intersectCubeSingle(torig*dirproj, dirproj, vec4(vec3(-1.001f), 1.0f), vec4(vec3(1.001f), 1.0f), near, far);
        toffset = max(near, 0.f), predist = min(predist, far * dirlenInv);
        vldbx &= lessF(bdist, INFINITY) & lessF(bdist * dirlenInv, INFINITY) & greaterEqualF(bdist, 0.0f);
    }

    // calculate box projected rays
    {
        divident = FVEC3_(dirproj);
        origined = FVEC3_(fma(torig,dirproj, -toffset.xxx));
        bsgn = (BVEC3_(sign(divident)*FTYPE_(1.0001f))+TRUE_)>>TRUE_;
        toffset *= dirlenInv;
    }

    // calculate longest axis
    axis = 2;
    {
        vec3 drs = abs(direct);
        if (drs.y >= drs.x && drs.y > drs.z) axis = 1;
        if (drs.x >= drs.z && drs.x > drs.y) axis = 0;
        if (drs.z >= drs.y && drs.z > drs.x) axis = 2;
    }

    // calculate affine matrices
    vec4 vm = vec4(-direct, 1.f) / (axis == 0 ? direct.x : (axis == 1 ? direct.y : direct.z));
    M = transpose(mat3(
        axis == 0 ? vm.wyz : vec3(1.f,0.f,0.f),
        axis == 1 ? vm.xwz : vec3(0.f,1.f,0.f),
        axis == 2 ? vm.xyw : vec3(0.f,0.f,1.f)
    ));

    idx = 0, esc = ivec2(-1, 0), lastesc = ivec2(-1, -1), deftri = ivec2(-1, -1), bstackCount = 0, validBoxIn = BOOL_(vldbx), deferredPtr = 0, mergeRestCmd = false;
    nodeCache[rayID].info.chainID = nodeCache[rayID].info.nextHt;
    nodeCache[rayID].info.prevHt = -1; // reset previous for avoid depth bug (multi-BVH)
}

//#define _ADD(m,k) atomicAdd(m,k)
//#define _ADD(m,k) add(m,k)
#define _ADD(m,k) min(m++,BAKED_STACK_SIZE-1)

// some optimize intersection and resolver
void intersectLeafs2(in ivec2 tri, in BVEC2_ isValid) {
    deftri = mix(deftri, tri, BVEC2_(greaterThanEqual(tri, ivec2(0))) & isValid);

    //if (allInvoc(deftri.x >= 0 || deftri.y >= 0 || !validBox) || mergeRestCmd) 
    {
        //mergeRestCmd = false;
        BVEC2_ near = BVEC2_(greaterThanEqual(deftri, ivec2(0)));

        // planned packed math
        vec4 uv2 = vec4(0.0f);
        vec2 _d2 = vec2(
            intersectTriangle(currentRay.origin.xyz, M, axis, deftri.x, uv2.xy, near.x, predist),
            intersectTriangle(currentRay.origin.xyz, M, axis, deftri.y, uv2.zw, near.y, predist)
        );

        float _nearhit = predist;
#ifdef ENABLE_AMD_INSTRUCTION_SET
        predist = min3(predist, _d2.x, _d2.y);
#else
        predist = min(min(predist, _d2.x), _d2.y);
#endif
        IF (lessF(predist, _nearhit)) { bstackCount = 0; }

        // include to cache
        near &= 
            BVEC2_(lessF(_d2.x, INFINITY), lessF(_d2.y, INFINITY)) & 
            BVEC2_(lessEqualF(_d2.x, predist), lessEqualF(_d2.y, predist));
        IF (near.x) nodeCache[rayID].bakedStack[_ADD(bstackCount, 1)] = vec4(uv2.xy, _d2.x, intBitsToFloat(deftri.x));
        IF (near.y) nodeCache[rayID].bakedStack[_ADD(bstackCount, 1)] = vec4(uv2.zw, _d2.y, intBitsToFloat(deftri.y));

        deftri.x = -1, deftri.y = -1, awaitFlag = false;
    } //else {
        //awaitFlag = true;
    //}
}

// planned block optimized system
void checkChildNodes() {
    IF (validBox) {
        int found = -1;
        BVEC2_ overlapsGeneral = BVEC2_(validBox) & BVEC2_(idx >= 0);
        bool leftNear = false;

        const vec2 inf2 = vec2(INFINITY);
        vec2 nears = inf2, fars = inf2;

        // calculate boxes intersections
        //IF (any(overlapsGeneral)) {
        ivec4 comp4 = (-1).xxxx;
        IF (validBox) {
            // fetch bvh metadata
            comp4 = texelFetch(bvhStorage, bvhLinear2D(idx), 0);
            { // test boxes
                int _cmp = comp4.x >> 1;
#ifdef FLATTEN_BOX
                overlapsGeneral &= intersectCubeDual(origined, divident, bsgn, FMAT3X4_(
                    UNPACK_LANE_(bvhBoxes[_cmp][0]),
                    UNPACK_LANE_(bvhBoxes[_cmp][1]),
                    UNPACK_LANE_(bvhBoxes[_cmp][2])
                ), nears, fars);
#else
                overlapsGeneral &= intersectCubeDual(origined, divident, bsgn, transpose(FMAT4X3_(
                    UNPACK_LANE_(bvhBoxes[_cmp][0]).xyz,
                    UNPACK_LANE_(bvhBoxes[_cmp][1]).xyz,
                    UNPACK_LANE_(bvhBoxes[_cmp][2]).xyz,
                    UNPACK_LANE_(bvhBoxes[_cmp][3]).xyz
                )), nears, fars);
#endif
                leftNear = bool(lessEqualF(nears.x, nears.y)), nears = fma(nears, dirlenInv.xx, toffset.xx);
            }
            
            // validate intersection
            overlapsGeneral &= 
                //BVEC2_(lessThan(nears, vec2(predist+PZERO))) & 
                BVEC2_(lessThanEqual(nears, vec2(INFINITY-PZERO)));
        }

        // if test is valid, extract BVH meta data
        ivec2 nodepdata = mix((-1).xx, comp4.xy, overlapsGeneral);

        // reorder nodes 
        bool leftOrder = SSC(all(overlapsGeneral)) ? leftNear.x : SSC(overlapsGeneral.x);
        if (!leftOrder) {
            overlapsGeneral.xy = overlapsGeneral.yx, nodepdata.xy = nodepdata.yx, nears.xy = nears.yx;
        }

        // culled intersection of leaf nodes
        IF (validBox & any(overlapsGeneral)) {
            vec2 lw = bvhGatherifyStorage(bvhLinear2D(comp4.x));
            ivec4 sibs = ivec4(-1);
            ivec2 trig = ivec2(-1);
            if (comp4.x >= 0) {
                sibs = ivec4(SGATHER(bvhStorage, lw, 0).wx, SGATHER(bvhStorage, lw, 1).wx), 
                trig = ivec2(SGATHER(bvhStorage, lw, 3).wx);
            }
            trig = mix(trig.yx, trig.xy, leftOrder.xx), sibs.xy = mix(sibs.yx, sibs.xy, leftOrder.xx), sibs.zw = mix(sibs.wz, sibs.zw, leftOrder.xx);
            intersectLeafs2(trig, overlapsGeneral);
            overlapsGeneral &= BVEC2_(notEqual(sibs.xy, sibs.zw)) & BVEC2_(lessThanEqual(nears - PZERO, vec2(predist)));
        }

        // choice child nodes by nears
        IF (any(overlapsGeneral)) {
            nodepdata.xy = SSC(overlapsGeneral.x) ? nodepdata.xy : nodepdata.yx, found = nodepdata.x;
            IF (all(overlapsGeneral) & BOOL_(nodepdata.y >= 0)) {
                storeStack(min(deferredPtr++, STACK_SIZE_SM-1), nodepdata.y);
            }
            deferredPtr = min(deferredPtr, STACK_SIZE_SM);
        }

        { // unified child/parent/another switcher
            bool _ssc = found >= 0;
            int ptr = (deferredPtr -= _ssc ? 0 : 1); deferredPtr = max(deferredPtr, 0);
            esc.x = idx, idx = _ssc ? found : loadStack(ptr), validBoxIn &= BOOL_(idx >= 0 && idx != esc.x), idx = mix(-1, idx, validBox);
        }
    }
}

void reorderTriangles() {
    int cnt = max(min(bstackCount, BAKED_STACK_SIZE), 0);
    
    if (cnt > 1) {
        for (int iround = 1; iround < cnt; iround++) {
            for (int index = 0; index < cnt - iround; index++) {
                
                // choice from both
                mat2x4 bakedPair = mat2x4(nodeCache[rayID].bakedStack[index], nodeCache[rayID].bakedStack[index+1]); // cache

                // swap or not
                ivec2 pairIdx = mix(ivec2(0, 1), ivec2(1, 0), (BOOL_(floatBitsToInt(bakedPair[0].w) <= floatBitsToInt(bakedPair[1].w)) & lessF(bakedPair[0].z, bakedPair[1].z)).xx );
                if (pairIdx.x != 0) nodeCache[rayID].bakedStack[index  ] = bakedPair[pairIdx.x];
                if (pairIdx.y != 1) nodeCache[rayID].bakedStack[index+1] = bakedPair[pairIdx.y];
            }
        }
    }

    cnt -= 1; // shift cnt

    // select only unique triangle ID's
    int cleanBakedStackCount = 0; // initial clean list
    for (int iround = 0; iround < cnt; iround++) { if (iround >= cnt) break;
        if (floatBitsToInt(nodeCache[rayID].bakedStack[iround+1].w) != floatBitsToInt(nodeCache[rayID].bakedStack[iround].w)) {
            nodeCache[rayID].bakedStack[cleanBakedStackCount++] = nodeCache[rayID].bakedStack[iround];
        }
    }

    // copy last primitive
    if (cnt >= 0) nodeCache[rayID].bakedStack[cleanBakedStackCount++] = nodeCache[rayID].bakedStack[cnt];

    // resolve for stage
    bstackCount = cleanBakedStackCount;
}

HitRework interpolateMeshData(inout HitRework res) {
    int tri = floatBitsToInt(res.uvt.w);
    BOOL_ validInterpolant = greaterEqualF(res.uvt.z, 0.0f) & lessF(res.uvt.z, INFINITY) & BOOL_(tri != LONGEST);
    IF (validInterpolant) {
        ivec2 triv = gatherMosaic(getUniformCoord(tri));

        // transposed
        mat3x3 triverts = mat3x3(fetchMosaic(vertex_texture, triv, 0).xyz, fetchMosaic(vertex_texture, triv, 1).xyz, fetchMosaic(vertex_texture, triv, 2).xyz);
        vec3 deltaPos1 = triverts[1] - triverts[0];
        vec3 deltaPos2 = triverts[2] - triverts[0];
        vec3 normal = normalize(cross(deltaPos1, deltaPos2));

        // gather texcoord
        vec3 vs = vec3(1.0f - res.uvt.x - res.uvt.y, res.uvt.xy);
        vec2 sz = 1.f / textureSize(vertex_texture, 0);
        vec2 trig = fma(vec2(triv), sz, sz * 0.9999f);

        // gather 
#define trinorms triverts
        trinorms = mat3x3(SGATHER(normal_texture, trig, 0)._SWIZV, SGATHER(normal_texture, trig, 1)._SWIZV, SGATHER(normal_texture, trig, 2)._SWIZV);
        normal = faceforward(vs * trinorms, -normal, normal); // mult matrix

        mat2x3 texcoords = mat2x3(SGATHER(texcoords_texture, trig, 0)._SWIZV, SGATHER(texcoords_texture, trig, 1)._SWIZV);
        mat3x2 txds = transpose(texcoords);
        mat2x2 dlts = mat2x2(txds[1]-txds[0],txds[2]-txds[0]);

        // tangent determinant
        float det = determinant(dlts), f = 1.f / (max(abs(det), 0.0001f) * (det >= 0.f ? 1 : -1));
        { f = isnan(f) ? 0.f : f, f = isinf(f) ? 10000.f : f; }

        // bitangent and tangent
        vec3 tang = fma(dlts[1].yyy, deltaPos1, -dlts[0].y * deltaPos2) * f;
        IF (validInterpolant) {
            res.normalHeight = vec4(normal, 0.0f);
            res.tangent = vec4(normalize(tang - normal * sign(dot(tang, normal))), 0.0f);
            res.texcoord.xy = vs * texcoords; // mult matrix
            res.materialID = materials[tri];
            HitActived(res, TRUE_); // temporary enable
        }
    }
    return res;
}

void includeChain(inout vec4 intersection) {
    // initial hit
    HitRework hitp; 
    hitp.next = -1;
    //hitp.uvt = vec4(vec2(0.0f), INFINITY, intBitsToFloat(-1));

    // reuse old chains (i.e. override)
    int hid = nodeCache[rayID].info.nextHt; if (hid > 0) hitp = hits[hid-1];
    nodeCache[rayID].info.nextHt = hitp.next > 0 ? hitp.next : -1; // next linked ID

    // allocate new hit if chain is none
    if (hid == -1 || hid <= 0) hid = atomicIncHT(TRUE_)+1;

    // create new hit element with default properties
    if (hid > 0) {
        hitp = hits[hid-1];
        hitp.bitfield = 0;
        hitp.materialID = 0;
        hitp.uvt = intersection;
        hitp.next = nodeCache[rayID].info.nextHt; // for future overriding
        hitp.ray = int(getGeneralNodeId());
        hitp.albedo = packHalf2(vec4(1.f, 1.f, 1.f, 1.f));
        hitp.metallicRoughness = packHalf2(vec4(vec2(1.f, 0.f), 0.f, 0.f));
        hitp.emission = packHalf2(vec4(0.f));
        hitp.normalHeight = vec4(0.0f);
        hitp.tangent = vec4(0.0f);
        HitActived(hitp, TRUE_);
        
        // interpolate by mesh
        interpolateMeshData(hitp); hits[hid-1] = hitp;

        // link previous element (or header) with current
        int prvh = exchange(nodeCache[rayID].info.prevHt, hid);
        if (prvh == -1) { nodeCache[rayID].info.chainID = hid; } else { exchange(hits[prvh-1].next, hid); }
    }
}

void choiceBaked() {
    mergeRestCmd = true; intersectLeafs2(ivec2(-1,-1), BVEC2_(FALSE_)); // intersect rest triangles
    if (bstackCount > 0) {
        reorderTriangles();
        for (int i=0;i<bstackCount;i++) { includeChain(nodeCache[rayID].bakedStack[i]); }
    }
}

LOCAL_SIZE_LAYOUT;

void main() {
    //int wsize = arcounter.tT;
    #define wsize arcounter.tT
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 100000);
    rayID = (int(gl_WorkGroupID.x) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x));

    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int it = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x); //rayID = it;
        BOOL_ overflow = BOOL_(it >= wsize);
        IFALL(overflow) break;
        accquireUnordered(it);

        // begin traverse (save to caches)
        overflow |= not(RayActived(currentRay)) | BOOL_(currentBlock < 0 || currentBlockNode < 0);
        nodeCache[rayID].info.nextHt = floatBitsToInt(currentRay.origin.w);
        
        // global traversing
        beginTraverse(currentRay.origin.xyz, currentRay.direct.xyz, not(overflow));
        for (int iteration=0;iteration<2048;iteration++) {
            IFALL(not(validBox) | overflow | BOOL_(idx < 0)) break;
            checkChildNodes(); // traverse BVH
        }
        choiceBaked(); // sort of intersections

        // resolve intersection
        int chainID = nodeCache[rayID].info.chainID;
        if (chainID > 0 && SSC(not(overflow))) {
            currentRay.origin.w = intBitsToFloat(chainID);
            storeRay();
        }
    }
}
