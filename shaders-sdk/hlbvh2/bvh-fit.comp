#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

LOCAL_SIZE_LAYOUT;

#define CONTRIB_TO_PARENT_HOST

void unifyNodeBox(in int idx){
    ivec4 comp = bvhMeta[idx]; // meta of contributable
    int sibid = comp.x >> 1; // contributor prefix box id
    int bidx = idx>>1, sidx = idx&1;

    // get contributors boxes
    mat4 lrbox = mat4(
        bvhBoxesWork[sibid][0], bvhBoxesWork[sibid][2], 
        bvhBoxesWork[sibid][1], bvhBoxesWork[sibid][3]
    );

    // contribute to current node
    if (bidx >= 0) {
        bvhBoxesWork[bidx][sidx*2+0] = min(lrbox[0], lrbox[1]);
        bvhBoxesWork[bidx][sidx*2+1] = max(lrbox[2], lrbox[3]);
    }

    // transpose and compress boxes of contributor
    lrbox = transpose(lrbox);
#ifdef USE_F32_BVH
    bvhBoxesResulting[sibid][0] = fvec4_(lrbox[0]);
    bvhBoxesResulting[sibid][1] = fvec4_(lrbox[1]);
    bvhBoxesResulting[sibid][2] = fvec4_(lrbox[2]);
    bvhBoxesResulting[sibid][3] = fvec4_(lrbox[3]);
#else
    bvhBoxesResulting[sibid][0].xy = packHalf2( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[0])) );
    bvhBoxesResulting[sibid][1].xy = packHalf2( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[1])) );
    bvhBoxesResulting[sibid][2].xy = packHalf2( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[2])) );
    bvhBoxesResulting[sibid][3].xy = packHalf2( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[3])) );
#endif
}

void main() {
    int wsize = cCounter;
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 50000);
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x); 
        IFALL (globalID >= wsize) break;
        if (globalID < wsize && globalID >= 0) {
            // get bbox host node of leafs
            int idx = exchange(LeafIndices[globalID], -1);
            
            // reductive unity boxes
            for (int l=0;l<256;l++) {
                
                // do contribution to parent node box host
                ivec4 cmp4 = bvhMeta[idx];
                if (idx >= 0) {
                    if (cmp4.y == 0) unifyNodeBox(idx);
                } else { 
                    break;
                }

                // set contributor ID to parent node ID
                idx = idx >= 0 ? cmp4.z : -1;

                // solve contribution question 
                bool nextContrib = idx >= 0;
                if (nextContrib) {
                    int _swp = atomicAdd(Flags[idx], 1);//atomicCompSwap(Flags[idx], 0, 1); // make sure contribution to parent complete
                    nextContrib = nextContrib && _swp == 1; 
                }

                // only one candidate can contribute to own parent (if has)
                idx = nextContrib ? idx : -1;
            }
        }
    }
}
