#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define USE_SIMPLIFIED_MODE

#ifndef MAX_DEPTH
#define MAX_DEPTH 8
#endif

#include "../include/constants.glsl"

#ifdef USE_BINDLESS
#extension GL_ARB_bindless_texture : enable
#endif

#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"
#include "../include/shadinglib.glsl"
#include "../rendering/environment.glsl"

struct SurfaceUnpacked {
     vec4 uvt; // UV, distance, triangle
     vec4 normalHeight; // normal with height mapping, will already interpolated with geometry
     vec4 metallicRoughness;

    // color parameters
     vec4 emission;
     vec4 albedo;
};

HitRework firstHit;
SurfaceUnpacked compositedHit[1];
int layers = 1; // support only one layer
int currentLayer = 0;
int wasHit = -1;
int proceduralID = -1;
#define hasProcedural (proceduralID != -1)


#define hit firstHit

void invokeSurface(inout bool overflow) {
    // initial hit
    HitActived(firstHit, FALSE_); firstHit.next = -1;
    currentLayer = 0, layers = 1, wasHit = -1, proceduralID = -1;

    // initial composition
    compositedHit[0].uvt = vec4(vec2(0.f), INFINITY, intBitsToFloat(-1));
    compositedHit[0].emission = vec4(0.f);
    compositedHit[0].albedo = vec4(0.f);
    compositedHit[0].normalHeight = vec4(0.f);
    compositedHit[0].metallicRoughness = vec4(0.f);

    // if hit was had
    float hitIDbinary = currentRay.origin.w;
    wasHit = overflow ? -1 : floatBitsToInt(hitIDbinary);
    if (wasHit != -1 && wasHit > 0) {
        firstHit = hits[wasHit-1];
    } else {
        wasHit = -1;
    }

    // search first actived
    int i = 0;
    while (HitActived(firstHit) == FALSE_ && i < 8 && firstHit.next != -1) { // search possible layer
        firstHit = hits[firstHit.next-1]; i++;
    }

    // if not found
    IF (not(HitActived(firstHit))) { // if none, make as transparent
        firstHit.next = -1; wasHit = -1;
    }
    
    // if any found
    IF (HitActived(firstHit)) {
        compositedHit[0].uvt = firstHit.uvt;
        compositedHit[0].albedo = unpackHalf(firstHit.albedo);
        compositedHit[0].emission = unpackHalf(firstHit.emission);
        compositedHit[0].metallicRoughness = unpackHalf(firstHit.metallicRoughness);
        compositedHit[0].normalHeight = firstHit.normalHeight;
    }

    // layers composition
    int searchLayer = 0;
    int hitID = firstHit.next-1;
    for (int i=0;i<8;i++) {
        if (hitID < 0) break;
        IF (not(equalF(compositedHit[searchLayer].uvt.z, hit.uvt.z))) { searchLayer = layers++; break; } // unsupported
        if (HitActived(hit) == 0) { hitID = hit.next; continue; } // if not actived 

        // composite decals
        vec4 albedo = unpackHalf(hit.albedo);
        compositedHit[searchLayer].uvt = hit.uvt;
        compositedHit[searchLayer].albedo = composite(compositedHit[searchLayer].albedo, albedo);
        compositedHit[searchLayer].normalHeight = fmix(compositedHit[searchLayer].normalHeight, hit.normalHeight, albedo.wwww);
        compositedHit[searchLayer].metallicRoughness = fmix(compositedHit[searchLayer].metallicRoughness, unpackHalf(hit.metallicRoughness), albedo.wwww);
        compositedHit[searchLayer].emission = fmix(compositedHit[searchLayer].emission, unpackHalf(hit.emission), albedo.wwww);

        // already filled layer
        if (compositedHit[searchLayer].albedo.a > 0.99999f) break;
        hitID = hit.next-1;
    }
}


void invalidateRay(inout RayRework rayTemplate, in bool overflow){
    if (RayBounce(rayTemplate) <= 0 || mlength(rayTemplate.color.xyz) < 0.00001f || overflow) RayActived(rayTemplate, FALSE_);
}

void cleanRay(inout RayRework rayTemplate){
    rayTemplate.final.xyz = max(vec3(0.0f), rayTemplate.final.xyz);
    rayTemplate.color.xyz = max(vec3(0.0f), rayTemplate.color.xyz);
    rayTemplate.origin.w = FINT_NULL; // reset chains
    invalidateRay(rayTemplate, false);
}


void envShading(inout bool skipping) {
    // bad ray
    if (skipping) RayActived(currentRay, FALSE_);

    // apply physical lights
    int lc = -1;
    const int lcount = min(RAY_BLOCK materialUniform.lightcount, 16);

    if (wasHit == -1) { 
        //RayActived(currentRay, FALSE_); 
        currentRay.final.xyz *= vec3(0.f);
    }
    
    IF (RayDL(currentRay) & RayActived(currentRay)) {
        for (int i=0;i<lcount;i++) {
            float md = 1.0f;
            float dt = intersectSphere(currentRay.origin.xyz, currentRay.direct.xyz, lightCenter(i).xyz, lightUniform.lightNode[i].lightColor.w + GAP);
            float t = md * dt;
            IF (lessF(dt, INFINITY) & lessEqualF(t, compositedHit[currentLayer].uvt.z)) lc = i;
        }
    }

    // shade light
    if (lc >= 0 && (RayTargetLight(currentRay) == lc || RayType(currentRay) != 2) && SSC(RayActived(currentRay))) {
        currentRay.final.xyz = currentRay.color.xyz * getLightColor(lc);
        //currentRay.final.xyz = currentRay.color.xyz * toLinear(getLightColor(lc));
        currentRay.color.xyz *= 0.0f;
        RayActived(currentRay, FALSE_);
        skipping = true;
    }

    // apply background
    vec4 color = vec4(0.0f); EnvironmentShader(color, currentRay); color.xyz = toLinear(max(color.xyz, vec3(0.f)));
    if ((SSC(greaterEqualF(compositedHit[currentLayer].uvt.z, INFINITY)) || wasHit == -1) && SSC(RayActived(currentRay)) && RayType(currentRay) != 2) {
        currentRay.final.xyz = currentRay.color.xyz * color.xyz;
        currentRay.color.xyz *= 0.0f;
        RayActived(currentRay, FALSE_);
        skipping = true;
    }

    // resolve and valiate ray
    //IF (RayActived(currentRay)) {
        currentRay.origin.xyz = fma(currentRay.direct.xyz, compositedHit[currentLayer].uvt.zzz, currentRay.origin.xyz);
        currentRay.direct.xyz = normalize(currentRay.direct.xyz);
    //}

    // not shadeable skipping
    if (wasHit == -1) {
        RayActived(currentRay, FALSE_);
        currentRay.color.xyz *= 0.0f;
        skipping = true; 
    }

    // stagging ray
    cleanRay(currentRay);
}


LOCAL_SIZE_LAYOUT;

int createBlockOnce(inout int block, in bool minimalCondition){
    if (block < 0 && anyInvoc(block < 0 && minimalCondition)) {
        int activeLane = firstActive();
        if (LANE_IDX == activeLane) block = createBlock(); block = readLane(block, activeLane);
        for (int tb = 0; tb < R_BLOCK_SIZE; tb += WARP_SIZE_RT) {
            int nid = tb + int(LANE_IDX);
            rayBlockNodes[block][nid].data.final = vec4(0.f);
            rayBlockNodes[block][nid].data.color = vec4(0.f);
            RayActived(rayBlockNodes[block][nid].data, FALSE_);
            RayBounce(rayBlockNodes[block][nid].data, 0);
            rayBlocks[block].indices[nid] = IDCTYPE(-1);
        }
    }
    return block;
}

//#include "./ocean-dlc.glsl"

void main() {
    #define wsize RAY_BLOCK samplerUniform.blockCount
    //int wsize = RAY_BLOCK samplerUniform.blockCount;
    int wcsize = int(gl_WorkGroupSize.x) / int(WARP_SIZE_RT);
    int wcount = min(tiled(wsize, wcsize), 50000);

    // invoke available blocks
    bool overflow = false;
    int wgs = int(gl_NumWorkGroups);
    for (int w=0;w<wcount;w+=wgs) {
        int globalID = (w + int(gl_WorkGroupID.x)) * wcsize + int(LC_IDX);
        globalInvocationSMP = globalID;

        // check if not reached blocks limit
        overflow = overflow || anyInvoc(overflow || anyInvoc(globalID >= wsize));
        IFALL(overflow) break;
        if (!overflow) {
            
            // accquire shading block
            currentBlock = -1;
            if (!overflow) accquireBlock(globalID);
            bool invld = anyInvoc(overflow || currentBlock < 0 || currentBlockSize <= 0);
            if (invld) { currentBlock = -1; continue; }
            
            resetBlockIndiceCounter(currentBlock);
            int shadowBlock = -1, emissionBlock = -1, diffuseBlock = -1, reflectionBlock = -1;

            // invoke block data
            if (!invld) {
                int bts = min(R_BLOCK_SIZE, currentBlockSize);
                for (int tb = 0; tb < bts; tb += WARP_SIZE_RT) {
                    int nid = tb + int(LANE_IDX);
                    randomClocks = 0, subHash = nid; // reset random clocks
                    bool overflow = invld || overflow || nid >= bts || nid < 0;
                    IFALL(overflow) break;
                    accquireNode(nid); overflow = overflow || currentBlockNode < 0;
                    IFALL(overflow) break;
                    invokeSurface(overflow);
                    
                    // rest rays shading
                    envShading(overflow);
                    
                    // constants
                    const float IOR = 1.400f;
                    const float diffuse_min_importance = 0.5f;
                    const float reflect_min_importance = 0.5f;
                    const vec3 max_fresnel_color = toLinear(vec3(1.f));
                    const vec3 min_fresnel_color = toLinear(vec3(1.f));

                    // get normals
                    vec3 surfacenormal = compositedHit[currentLayer].normalHeight.xyz;
                    vec3 normal = faceforward(surfacenormal, currentRay.direct.xyz, surfacenormal);

                    // get texture composition data
                    vec4 diffcolor = compositedHit[currentLayer].albedo;
                    vec4 emiscolor = compositedHit[currentLayer].emission;
                    float refly = compositedHit[currentLayer].metallicRoughness.x; // roughness
                    float metallic = sqrt(compositedHit[currentLayer].metallicRoughness.y); // metallic

                    vec3 freflcolor = fmix(max_fresnel_color * 1.f, min_fresnel_color * 0.1f, clamp(pow(abs(dot(currentRay.direct.xyz, normal)), IOR - 1.f), 0.0f, 1.0f).xxx);
                    vec3 speccolor = fmix(freflcolor, diffcolor.xyz, metallic.xxx);
                    
                    // coefficents
                    float prom = clamp01(1.f - diffcolor.a); // transmission power
                    float spca = fmix(mlength(freflcolor), 1.f, metallic.x);
                    float emis = clamp01(mlength(emiscolor.xyz)); // emission power
                    //spca *= 0.f; // performance debug

                    // diffuse and specular colors (based on priorities)
                    vec3 _specular = clamp01(speccolor.xyz / spca);
                    vec3 _emission = emiscolor.xyz * (1.f - freflcolor * (1.f - metallic)) * (1.f - prom);
                    vec3 _diffuse = diffcolor.xyz;

                    // inactive or shadows disallowed to shading
                    int overwriteBlock = currentBlock; bool confirmed = false;
                    if (hasProcedural) { prom = 1.f; confirmed = true; }

                    // binarize/quantize 
                    bool tprior = prom >= spca;
                    float qprom = RayType(currentRay) == 3 &&  tprior ? prom : (random() < prom ? 1.f : 0.f); //random() < prom ? 1.f : 0.f;
                    float qspca = RayType(currentRay) == 3 && !tprior ? spca : (random() < spca ? 1.f : 0.f); // only primary rays can division (because stupid user/gamer can't seen noise effects after reflections)
                    //float qspca = random() < spca ? 1.f : 0.f;

                    // transparent rays
                    RayRework rayTemplate = promised(currentRay, normal); 
                    rayTemplate.color.xyz *= RayType(currentRay) == 2 ? prom : qprom; // shadows dims 
                    invalidateRay(rayTemplate, overflow);
                    storeRay(overwriteBlock, rayTemplate);
                    confirmNode(overwriteBlock, confirmed = RayActived(rayTemplate) == 1 && !overflow);
                    IF (not(RayActived(currentRay))) confirmed = true;
                    
                    //IFANY (!confirmed) { // if any ray allowed
                        // diffuse rays (planned acceleration by rasterizer)
                        rayTemplate = diffuse(currentRay, diffcolor.xyz * (1.f - qspca) * (1.f - qprom), normal);
                        if (RayType(currentRay) == 2) RayActived(rayTemplate, FALSE_); // incompatible with shadows
                        invalidateRay(rayTemplate, overflow);
                        createBlockOnce(diffuseBlock, !overflow && RayActived(rayTemplate) == 1 && confirmed);
                        storeRay(overwriteBlock = confirmed || diffuseBlock >= 0 ? diffuseBlock : overwriteBlock, rayTemplate);
                        confirmNode(overwriteBlock, confirmed = RayActived(rayTemplate) == 1 && !overflow);

                        // reflection rays
                        rayTemplate = reflection(currentRay, _specular * qspca * (1.f - qprom), normal, refly);
                        if (RayType(currentRay) == 2) RayActived(rayTemplate, FALSE_); // incompatible with shadows
                        invalidateRay(rayTemplate, overflow);
                        createBlockOnce(reflectionBlock, !overflow && RayActived(rayTemplate) == 1 && confirmed);
                        storeRay(overwriteBlock = confirmed || reflectionBlock >= 0 ? reflectionBlock : overwriteBlock, rayTemplate);
                        confirmNode(overwriteBlock, confirmed = RayActived(rayTemplate) == 1 && !overflow);

                        // shadow rays
                        confirmed = true; // no, you can't write shadows on...
                        rayTemplate = directLight(0, currentRay, diffcolor.xyz * (1.f - spca) * (1.f - prom), normal);
                        if (RayType(currentRay) == 2) RayActived(rayTemplate, FALSE_); // incompatible with shadows
                        invalidateRay(rayTemplate, overflow);
                        createBlockOnce(shadowBlock, !overflow && RayActived(rayTemplate) == 1 && confirmed);
                        storeRay(overwriteBlock = confirmed || shadowBlock >= 0 ? shadowBlock : overwriteBlock, rayTemplate);
                        confirmNode(overwriteBlock, confirmed = RayActived(rayTemplate) == 1 && !overflow);

                        // emissions
                        rayTemplate = emissive(currentRay, _emission, normal);
                        if (overflow || RayType(currentRay) == 2) rayTemplate.final = vec4(0.f);
                        invalidateRay(rayTemplate, true);
                        createBlockOnce(emissionBlock, !overflow && mlength(rayTemplate.final.xyz) >= 0.00001f);
                        storeRay(emissionBlock, rayTemplate);
                    //}
                }
            }


            bool emissionHasIllumination = false, 
                 materialHasIllumination = false, 
                 shadowsHasIllumination = false,
                 reflectHasIllumination = false, 
                 diffuseHasIllumination = false;
            
            for (int tb = 0; tb < R_BLOCK_SIZE; tb += WARP_SIZE_RT) {
                int nid = int(tb + LANE_IDX);
                if (emissionBlock >= 0) copyBlockIndices(emissionBlock, nid);
                if (currentBlock >= 0) copyBlockIndices(currentBlock, nid);
                if (shadowBlock >= 0) copyBlockIndices(shadowBlock, nid);
                if (diffuseBlock >= 0) copyBlockIndices(diffuseBlock, nid);
                if (reflectionBlock >= 0) copyBlockIndices(reflectionBlock, nid);

                materialHasIllumination = anyInvoc(materialHasIllumination || anyInvoc(checkIllumination(currentBlock, nid)));
                emissionHasIllumination = anyInvoc(emissionHasIllumination || anyInvoc(checkIllumination(emissionBlock, nid)));
                //reflectHasIllumination = anyInvoc(reflectHasIllumination || anyInvoc(checkIllumination(reflectionBlock, nid)));
                //diffuseHasIllumination = anyInvoc(diffuseHasIllumination || anyInvoc(checkIllumination(diffuseBlock, nid)));
            }

            emissionHasIllumination = anyInvoc(emissionHasIllumination);
            materialHasIllumination = anyInvoc(materialHasIllumination);
            //reflectHasIllumination = anyInvoc(reflectHasIllumination);
            //diffuseHasIllumination = anyInvoc(diffuseHasIllumination);
            
            if (LANE_IDX == 0) {
                // flush emission block
                if (emissionBlock >= 0) {
                    flushBlock(emissionBlock, emissionHasIllumination);
                }

                // confirm reflection block
                if (reflectionBlock >= 0) {
                    if (getBlockIndiceCounter(reflectionBlock) > 0 && RAY_BLOCK samplerUniform.iterationCount < (MAX_DEPTH-1)) { 
                        confirmBlock(reflectionBlock); 
                    } else { 
                        flushBlock(reflectionBlock, reflectHasIllumination); 
                    }
                }

                // confirm diffuse block
                if (diffuseBlock >= 0) {
                    if (getBlockIndiceCounter(diffuseBlock) > 0 && RAY_BLOCK samplerUniform.iterationCount < (MAX_DEPTH-1)) { 
                        confirmBlock(diffuseBlock); 
                    } else { 
                        flushBlock(diffuseBlock, diffuseHasIllumination); 
                    }
                }

                // confirm shadow block
                if (shadowBlock >= 0) {
                    if (getBlockIndiceCounter(shadowBlock) > 0 && RAY_BLOCK samplerUniform.iterationCount < (MAX_DEPTH-1)) { 
                        confirmBlock(shadowBlock); 
                    } else { 
                        flushBlock(shadowBlock, shadowsHasIllumination); 
                    }
                }

                // confirm transparency block
                if (currentBlock >= 0) {
                    if (getBlockIndiceCounter(currentBlock) > 0 && RAY_BLOCK samplerUniform.iterationCount < (MAX_DEPTH-1)) { 
                        confirmBlock(currentBlock); 
                    } else { 
                        flushBlock(currentBlock, materialHasIllumination); 
                    }
                }
            }
            
        }
    }
}
