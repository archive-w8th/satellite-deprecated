#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_BUILD
#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

//LOCAL_SIZE_LAYOUT;
layout ( local_size_x = 1024 ) in;

int cdelta( in int a, in int b ){
#ifdef UNIVERSAL_PLATFORM
    uvec2 acode = Mortoncodes[a], bcode = Mortoncodes[b];
    acode.x = a, bcode.x = b;
    return nlz(acode^bcode);
#else 
    uvec2 acode = Mortoncodes[a], bcode = Mortoncodes[b];
    int pfx = nlz(acode^bcode);
    return pfx + (pfx < 64 ? 0 : nlz(a^b));
#endif
}

int findSplit( in int first, in int last) {
    int commonPrefix = cdelta(first, last), split = first, nstep = last - first;
    IFANY (commonPrefix < 64) {
        for (int i=0;(i<8192 && nstep>1);i++) {
            nstep = (nstep + 1) >> 1;
            int newSplit = split + nstep, code = cdelta(first, newSplit);
            split = code > commonPrefix ? newSplit : split;
        }
    } else {
        split = (split+last)>>1;
    }
    return clamp(split, first, last-1);
}


shared int _counters[8];

initAtomicSubgroupIncFunction(_counters[0], lCounterInc, 2, int)
initAtomicSubgroupIncFunction(_counters[1], aCounterInc, 1, int)
initAtomicSubgroupIncFunction(_counters[2], cCounterInc, 1, int)
initAtomicSubgroupIncFunction(_counters[2], cCounterDualInc, 2, int)
#define cBuffer _counters[4]


void splitNode(in int trID) {
    int prID = Actives[trID][1-cBuffer]|(int(Local_Idx)&1); // select element, include sibling

    ivec4 _pdata = bvhMeta[prID];
    if (_pdata.y > _pdata.x && _pdata.w == -1 && prID >= 0 && _pdata.x >= 0) { // when not leafs

        // find split
        int split = findSplit(_pdata.x, _pdata.y);
        int hid = lCounterInc();
        
        // encode with SIMD-like
        ivec4 transplit = ivec4(_pdata.x, split+0, split+1, _pdata.y);
        bvec2 isLeaf = lessThan(transplit.yw - transplit.xz, ivec2(1));
        ivec2 hd = hid + ivec2(0, 1);

        // if any can continue splitting
        if (any(not(isLeaf))) { Actives[aCounterInc()][cBuffer] = hd.x; }

        if (all(isLeaf)) {
            int cl = cCounterDualInc(); 
            LeafIndices[cl+0] = hd.x+0, 
            LeafIndices[cl+1] = hd.x+1;
        }

        // link parent with childs
        bvhMeta[prID] = ivec4(hd.x, 2, _pdata.z, 0); // set as branching
        Flags[prID] = 0;

        // make children nodes (with unknown identifier)
        bvhMeta[hd.x] = ivec4(transplit.xy, prID, -1);
        bvhMeta[hd.y] = ivec4(transplit.zw, prID, -1);
    } else 
    if (_pdata.y == _pdata.x && _pdata.w == -1 && prID >= 0 && _pdata.x >= 0 && _pdata.z >= 0) {
        LeafIndices[cCounterInc()] = prID;
    }
}


void main() {
    int threadID = int(Local_Idx);
    int WS = int(gl_WorkGroupSize.x);
    if (threadID < 1) { cBuffer = 0; }
    if (threadID < 8) { _counters[threadID] = 0; }

    LGROUP_BARRIER

    // create initial (root) node
    if (threadID == 0) {
        int hid = lCounterInc(); Actives[aCounterInc()][cBuffer] = hid;
        bvhMeta[hid+0] = ivec4(0, aabbcount-1, -1, -1);
        bvhMeta[hid+1] = ivec4(-1, -1, -1, 1);
    }
    LGROUP_BARRIER
    
    // begin work on splitting
    int asize = _counters[1];
    for (int m=0;m<8192;m++) {
        // goto next iteration
        asize = _counters[1];
        IFALL (asize <= 0) break;
        LGROUP_BARRIER

        if (threadID == 0) {
            _counters[1] = 0;
            cBuffer = 1-cBuffer; // ping pong
        }
        LGROUP_BARRIER
        
        // split nodes
        uint wsize = min(tiled(asize, tiled(WS,2)), 65536u);
        for (int i=0;i<wsize;i++) {
            int trID = (i * WS + threadID)>>1;
            IFALL (trID >= asize) break;
            if (trID < asize) splitNode(trID);
        }
        LGROUP_BARRIER
    }

    if (threadID == 0) {
        lCounter = _counters[0];
        aCounter = _counters[1];
        cCounter = _counters[2];
    }
}
