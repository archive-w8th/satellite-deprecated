#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"

#define MB_PAGES 3

layout ( binding = 0, set = 1, rgba32f ) uniform image2D presampled;
layout ( binding = 1, set = 1, rgba32f ) uniform image2D prefiltered;
layout ( binding = 2, set = 1, rgba32f ) uniform image2D prevsample;
layout ( binding = 3, set = 1, r32ui ) uniform uimage2D sampleflags;


void incremental(inout vec4 c0, inout vec4 c1) {
    vec4 mn = mix(c0, c1, lessThanEqual(c0, c1));
    vec4 mx = mix(c0, c1, greaterThanEqual(c0, c1));
    c0 = mn;
    c1 = mx;
}

vec4 midof(in vec4 a, in vec4 b, in vec4 c) {
#if (defined(ENABLE_AMD_INSTRUCTION_SET))
    b = mid3(a, b, c);
#else
    incremental(a, b);
    incremental(a, c);
    incremental(b, c);
#endif
    return b;
}

vec4 checkerFetch(in ivec2 tx, in int lod) { 
    // center of pixels
    vec4 ct = imageLoad(presampled, tx);
    
    // interlacing filter
    vec4 px1 = imageLoad(presampled, tx + ivec2(1, 0));
    vec4 py1 = imageLoad(presampled, tx + ivec2(0, 1));
    vec4 mif = midof(px1, py1, ct);
    return (RAY_BLOCK cameraUniform.interlace == 1 ? fmix(mif, ct, 0.5f.xxxx) : ct);
}

LOCAL_SIZE_LAYOUT;

void main() {
    int it = int(gl_GlobalInvocationID.x);
    ivec2 wh = ivec2(RAY_BLOCK samplerUniform.sceneRes.xy);
    ivec2 whs = ivec2(imageSize(presampled).xy);
    ivec3 xyl = ivec3(it % whs.x, it / whs.x, 0);

    imageStore(prefiltered, xyl.xy, checkerFetch(xyl.xy, 0));
}
