#version 460 core
#extension GL_GOOGLE_include_directive : enable

/*
#ifdef NVIDIA_PLATFORM
#define WORK_SIZE_BND 640
#else 
#define WORK_SIZE_BND 512
#endif
*/

#define WORK_SIZE_BND 1024

#define BVH_BUILD
#define BVH_CREATION

#include "../include/constants.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"


// split function by morton codes
int findSplit( in int first, in int last) {
    uvec2 firstCode = Mortoncodes[first], lastCode = Mortoncodes[last];
    int split = first;
    if (firstCode == lastCode) {
        split = (first + last) >> 1;
    } else {
        int commonPrefix = nlz(firstCode ^ lastCode);
        int step = last - first;

        [[dependency_infinite]]
        do {
            step = (step + 1) >> 1;
            int newSplit = split + step;
            if (newSplit < last) {
                uvec2 splitCode = Mortoncodes[newSplit];
                int splitPrefix = nlz(firstCode ^ splitCode);
                if (splitPrefix > commonPrefix) { split = newSplit; }
            }
        } while (step > 1);
    }
    //return clamp(split, first, last-1);
    return clamp(split, first, last);
}


// shared memory counters
shared int _counters[8];
#define cBuffer _counters[3]

// define function for increment
initAtomicSubgroupIncFunction(_counters[0], aCounterInc, 1, int)
initAtomicSubgroupIncFunction(_counters[1], lCounterInc, 2, int)
initAtomicSubgroupIncFunction(_counters[2], cCounterInc, 1, int)
initAtomicSubgroupIncFunction(_counters[2], cCounterDualInc, 2, int)


void splitNode(in int fID, in int side) {
    // select elements, include sibling
    int prID = fID + side;

    [[flatten]]
    if (prID >= 0 && fID >= 0) {
        // initial box and refit status
        bvhBoxesWork[prID] = vec4[2](100000.f.xxxx, -100000.f.xxxx); // initial AABB
        Flags[prID] = 0; // reset flag of refit

        // splitting nodes
        ivec4 _pdata = bvhMeta[prID];

        [[flatten]]
        if (_pdata.x >= 0 && _pdata.y >= 0) {

            [[flatten]]
            if (_pdata.y != _pdata.x) {

                // find split
                int split = findSplit(_pdata.x, _pdata.y-1);
                ivec4 transplit = ivec4(_pdata.x, split+0, split+1, _pdata.y);
                bvec2 isLeaf = lessThan(transplit.yw - transplit.xz, ivec2(1,1));
                int hd = lCounterInc();
                
                // resolve branch
                bvhMeta[prID].xy = (hd+1).xx+ivec2(0,1);
                bvhMeta[hd+0] = ivec4(transplit.xy, prID, 0);
                bvhMeta[hd+1] = ivec4(transplit.zw, prID, 0);

                // add prefix to next task
                Actives[aCounterInc()][cBuffer] = hd+1;
            } 

            // if leaf, add to leaf list
            [[flatten]]
            if (_pdata.y == _pdata.x) {
                LeafIndices[cCounterInc()] = prID+1;
            }
        }
    }
}


layout ( local_size_x = WORK_SIZE_BND ) in;

void main() {
    const int threadID = int(Local_Idx);
    const int groupSize = int(gl_WorkGroupSize.x);

    // lane-based
    //const int gS = tiled(groupSize, 2);
    //const int iT = threadID >> 1;
    //const int sD = threadID & 1;

    const int gS = groupSize;
    const int iT = threadID;
    const int sD = 0;

    LGROUP_BARRIER
    if (threadID < 8) { _counters[threadID] = 0; }
    LGROUP_BARRIER

    // create initial (root) node
    if (threadID == 0) {
        int hid = lCounterInc();
        bvhMeta[hid+0] = ivec4(0, aabbcount-1, -1, 0);
        bvhMeta[hid+1] = ivec4(-1, -1, -1, -1);
        Actives[aCounterInc()][cBuffer] = hid+1;
    }
    LGROUP_BARRIER
    
    // building BVH
    [[unroll, dependency_length(4)]]
    for (int m=0;m<65536;m++) {
        // check activity counter
        const int asize = _counters[0];
        IFALL (asize <= 0) break; // if there is no element, stop splitting

        // switch buffer and reset counter
        LGROUP_BARRIER
        if (threadID == 0) { cBuffer = 1-cBuffer; _counters[0] = 0; }
        LGROUP_BARRIER

        // split nodes
        const int wcount = tiled(asize, gS)*gS;
        for (int fT=0;fT<wcount;fT+=gS) {
            // subgroup barrier
            SB_BARRIER

            // index of node element
            const int uID = fT + iT; 
            
            // split prefixed elements
            IFALL (uID >= asize) break;

            // get spared prefix
            const int fID = exchange(Actives[uID][1-cBuffer], 0)-1;

            // split sibling nodes
            [[flatten]]
            if (uID < asize && fID >= 0) { splitNode(fID, 0), splitNode(fID, 1); }
        }

        // sync BVH splitting
        LGROUP_BARRIER
    }

    // copy to external counters
    if (threadID == 0) {
        aCounter = _counters[0];
        lCounter = _counters[1];
        cCounter = _counters[2];
    }
    LGROUP_BARRIER
}
